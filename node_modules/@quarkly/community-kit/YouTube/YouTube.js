"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.youtubeLinkParser = youtubeLinkParser;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactYoutube = _interopRequireDefault(require("react-youtube"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _fa = require("react-icons/fa");

var _Popup = require("../Popup");

var _ComponentNotice = _interopRequireDefault(require("../ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var duration = 300;
var overrides = {
  'YouTube Content': {
    kind: 'Box',
    props: {
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      position: 'absolute'
    }
  },
  'YouTube Button Overlay': {
    kind: 'Box',
    props: {
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      'align-items': 'center',
      'justify-content': 'center',
      position: 'absolute',
      display: 'flex',
      'background-color': 'transparent',
      'hover-background-color': 'rgba(255,255,255,.01)'
    }
  },
  'YouTube Button Overlay :play': {
    props: {
      transition: "\n            background-color ".concat(duration, "ms ease,\n            visibility ").concat(duration, "ms step-end,\n            opacity ").concat(duration, "ms ease-in-out\n        "),
      visibility: 'hidden',
      opacity: '0'
    }
  },
  'YouTube Button Overlay :pause': {
    props: {
      transition: "\n            background-color ".concat(duration, "ms ease,\n            visibility ").concat(duration, "ms step-start,\n            opacity ").concat(duration, "ms ease-in-out\n        "),
      visibility: 'visible',
      opacity: '1'
    }
  },
  'YouTube Button': {
    kind: 'Box',
    props: {
      width: '90px',
      height: '90px',
      'align-items': 'center',
      'justify-content': 'center',
      'background-color': '--color-primary',
      'border-radius': '100%',
      display: 'flex',
      cursor: 'pointer'
    }
  },
  'YouTube Button Icon': {
    kind: 'Icon',
    props: {
      size: '28px',
      category: 'fa',
      defaultIcon: _fa.FaPlay,
      color: '#FFFFFF',
      margin: '0px -6px 0px 0px'
    }
  }
};

function youtubeLinkParser(url) {
  if (typeof url !== 'string') return false;
  var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
  var match = url.match(regExp);
  return match && match[7].length === 11 ? match[7] : false;
}

var useHandlePopup = function useHandlePopup(_ref) {
  var isPlay = _ref.isPlay,
      pauseVideo = _ref.pauseVideo;
  var context = (0, _react.useContext)(_Popup.PopupContext);
  (0, _react.useEffect)(function () {
    if (!context) return;
    var isOpen = context.isOpen;

    if (!isOpen && isPlay) {
      pauseVideo();
    }
  }, [isPlay, pauseVideo, context]);
};

var YouTubeComponent = function YouTubeComponent(_ref2) {
  var url = _ref2.url,
      autoplay = _ref2.autoplay,
      controls = _ref2.controls,
      disablekb = _ref2.disablekb,
      fs = _ref2.fs,
      loop = _ref2.loop,
      modestbranding = _ref2.modestbranding,
      showOverlay = _ref2.showOverlay,
      props = _objectWithoutProperties(_ref2, ["url", "autoplay", "controls", "disablekb", "fs", "loop", "modestbranding", "showOverlay"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isReady = _useState2[0],
      setReady = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isPlay = _useState4[0],
      setPlay = _useState4[1];

  var playerRef = (0, _react.useRef)(null);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var videoId = youtubeLinkParser(url);

  var readyVideo = function readyVideo(_ref3) {
    var target = _ref3.target;

    var checkIframe = function checkIframe(value) {
      return value instanceof HTMLElement && value.tagName === 'IFRAME';
    };

    var iframe = Object.values(target).find(function (value) {
      return checkIframe(value);
    });
    if (!iframe) return;
    iframe.style.position = 'absolute';
    setReady(true);
  };

  var playVideo = (0, _react.useCallback)(function () {
    if (!playerRef.current) return;
    playerRef.current.internalPlayer.playVideo();
    setPlay(true);
  }, []);
  var pauseVideo = (0, _react.useCallback)(function () {
    if (!playerRef.current) return;
    playerRef.current.internalPlayer.pauseVideo();
    setPlay(false);
  }, []);
  useHandlePopup({
    isPlay: isPlay,
    pauseVideo: pauseVideo
  });
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    "padding-top": videoId ? '56.25%' : '0',
    "min-height": videoId ? '0' : undefined,
    height: videoId ? '0' : undefined,
    position: "relative"
  }, rest), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, override('YouTube Content'), {
    display: !videoId || !isReady ? 'none' : undefined
  }), videoId && /*#__PURE__*/_react["default"].createElement(_reactYoutube["default"], {
    ref: playerRef,
    videoId: videoId,
    opts: {
      width: '100%',
      height: '100%',
      playerVars: {
        // Some properties is boolean but YouTube component requires number
        autoplay: autoplay ? 1 : 0,
        controls: controls ? 1 : 0,
        disablekb: disablekb ? 1 : 0,
        fs: fs ? 1 : 0,
        loop: loop ? 1 : 0,
        modestbranding: modestbranding ? 1 : 0
      }
    },
    onReady: readyVideo,
    onPlay: playVideo,
    onPause: pauseVideo
  })), showOverlay && /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, override('YouTube Button Overlay', "YouTube Button Overlay ".concat(videoId && !isPlay ? ':pause' : ':play')), {
    onClick: playVideo
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Box, override('YouTube Button'), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, override('YouTube Button Icon')))), (!url || !videoId) && /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add your video link in the Props panel"
  }));
};

var propInfo = {
  url: {
    title: {
      en: 'Link to the video on YouTube',
      ru: 'Ссылка на видео на YouTube'
    },
    control: 'input',
    type: 'text',
    category: ' Main',
    weight: 1
  },
  autoplay: {
    title: {
      en: 'Auto playback',
      ru: 'Автоматическое воспроизведение'
    },
    description: {
      en: 'Automatically plays the video when the page loads',
      ru: 'Автоматическое воспроизведение видео при загрузке страницы'
    },
    control: 'checkbox',
    category: ' Main',
    weight: 0.5
  },
  controls: {
    title: {
      en: 'Show controls',
      ru: 'Показывать элементы управления'
    },
    control: 'checkbox',
    category: ' Main',
    weight: 0.5
  },
  disablekb: {
    title: {
      en: 'Disable keyboard controls',
      ru: 'Отключить управление с клавиатуры'
    },
    control: 'checkbox',
    category: ' Main',
    weight: 0.5
  },
  fs: {
    title: {
      en: 'Show fullscreen button',
      ru: 'Показывать полноэкранную кнопку'
    },
    control: 'checkbox',
    category: ' Main',
    weight: 0.5
  },
  loop: {
    title: {
      en: 'Loop playback',
      ru: 'Зациклить воспроизведение'
    },
    control: 'checkbox',
    category: ' Main',
    weight: 0.5
  },
  modestbranding: {
    title: {
      en: 'Hide YouTube logo',
      ru: 'Скрыть логотип YouTube'
    },
    control: 'checkbox',
    category: ' Main',
    weight: 0.5
  },
  showOverlay: {
    title: {
      en: 'Show overlay with custom button',
      ru: 'Показать оверлей с настраиваемой кнопкой'
    },
    control: 'checkbox',
    category: 'Overlay',
    weight: 1
  }
};
var defaultProps = {
  position: 'relative',
  autoplay: false,
  controls: true,
  disablekb: false,
  fs: true,
  loop: false,
  modestbranding: false,
  showOverlay: true
};
Object.assign(YouTubeComponent, {
  title: 'YouTube Player',
  description: {
    en: 'This component plays videos from Youtube',
    ru: 'Компонент, для воспроизведения видео из YouTube'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});
var _default = YouTubeComponent;
exports["default"] = _default;