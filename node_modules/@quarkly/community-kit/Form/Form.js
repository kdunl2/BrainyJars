"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _props = require("./props");

var _utils = require("../utils");

var _ComponentNotice = _interopRequireDefault(require("../ComponentNotice"));

var _context = require("./context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Form = _atomize["default"].form();

var FormComponent = function FormComponent(_ref) {
  var action = _ref.action,
      autoComplete = _ref.autoComplete,
      charset = _ref.charset,
      enctype = _ref.enctype,
      method = _ref.method,
      name = _ref.name,
      novalidate = _ref.novalidate,
      target = _ref.target,
      onSubmitCb = _ref.onSubmitCb,
      onResetCb = _ref.onResetCb,
      props = _objectWithoutProperties(_ref, ["action", "autoComplete", "charset", "enctype", "method", "name", "novalidate", "target", "onSubmitCb", "onResetCb"]);

  var contentRef = (0, _react.useRef)();

  var _useOverrides = (0, _components.useOverrides)(props, _props.overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  var isEmpty = (0, _react.useMemo)(function () {
    return (0, _utils.isEmptyChildren)(children);
  }, [children]);

  var _useForm = (0, _context.useForm)(),
      reset = _useForm.reset;

  var onReset = (0, _react.useCallback)(function (e) {
    e.preventDefault();
    reset();
    onResetCb === null || onResetCb === void 0 ? void 0 : onResetCb();
  }, [reset, onResetCb]);
  return /*#__PURE__*/_react["default"].createElement(Form, _extends({
    action: action,
    autoComplete: autoComplete,
    "accept-charset": charset,
    enctype: enctype,
    method: method,
    name: name,
    novalidate: novalidate,
    target: target,
    onSubmit: onSubmitCb,
    onReset: onReset,
    "flex-direction": "column",
    display: "flex"
  }, rest), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, override('Content'), {
    ref: contentRef
  }), children, isEmpty && /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Drag Input, Textarea, Checkbox or Radio component here"
  })));
};

var FormComponentWrapped = (0, _context.withForm)(FormComponent);
Object.assign(FormComponentWrapped, {
  title: 'Form',
  description: {
    ru: 'Простая форма на странице'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});
var _default = FormComponentWrapped;
exports["default"] = _default;