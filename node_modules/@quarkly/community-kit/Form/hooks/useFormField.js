"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _context = require("../context");

var _utils = require("../../utils");

var _usePrevious = _interopRequireDefault(require("../../utils/usePrevious"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var useFormField = function useFormField(name, _ref) {
  var defaultValue = _ref.defaultValue;
  var formContext = (0, _context.useForm)();
  var isInForm = formContext !== undefined;

  var _ref2 = formContext !== null && formContext !== void 0 ? formContext : {},
      values = _ref2.values,
      handleChange = _ref2.handleChange,
      setDefault = _ref2.setDefault,
      updateName = _ref2.updateName;

  var prevName = (0, _usePrevious["default"])(name);
  var isFirst = (0, _react.useRef)(true);
  var isDev = (0, _utils.getAPI)().mode === 'development';
  (0, _react.useLayoutEffect)(function () {
    if (!isInForm) return;

    if (prevName !== undefined && prevName !== name) {
      updateName(prevName, name);
    }
  }, [name, isInForm, prevName, updateName]);
  (0, _react.useLayoutEffect)(function () {
    if (!isInForm) return;

    if (isDev || isFirst.current) {
      handleChange === null || handleChange === void 0 ? void 0 : handleChange(name, defaultValue);
      setDefault === null || setDefault === void 0 ? void 0 : setDefault(name, defaultValue);
    }

    isFirst.current = false;
  }, [isInForm, name, defaultValue, isDev, handleChange, setDefault]);
  var onChange = (0, _react.useCallback)(function (e) {
    e.persist();

    if (e.target.type === 'checkbox') {
      handleChange === null || handleChange === void 0 ? void 0 : handleChange(name, e.target.checked);
      return;
    }

    if (e.target.type === 'select-multiple') {
      var value = Array.from(e.target.selectedOptions, function (option) {
        return option.value;
      });
      handleChange === null || handleChange === void 0 ? void 0 : handleChange(name, value);
      return;
    }

    handleChange === null || handleChange === void 0 ? void 0 : handleChange(name, e.target.value);
  }, [handleChange, name]);
  return {
    isInForm: isInForm,
    fieldProps: {
      value: values === null || values === void 0 ? void 0 : values[name],
      onChange: onChange
    }
  };
};

var _default = useFormField;
exports["default"] = _default;