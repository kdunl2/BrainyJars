"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isBrowser = typeof window !== 'undefined';

var getLinks = function getLinks(_ref) {
  var _window$location, _window$location2;

  var rootId = _ref.rootId;

  var _getAPI = (0, _utils.getAPI)(),
      pages = _getAPI.pages,
      mode = _getAPI.mode;

  if (!isBrowser || !pages) return {
    links: [],
    url: []
  };
  var rootPage = pages[rootId];
  var names = Object.values(pages).reduce(function (prev, curr) {
    return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, curr.pageUrl, curr));
  }, {});
  var url = mode === 'production' ? (_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.pathname.slice(1) : (_window$location2 = window.location) === null || _window$location2 === void 0 ? void 0 : _window$location2.hash.slice(2);

  if (['/', '/index'].includes(url)) {
    url = '';
  }

  if (url.endsWith('/')) {
    url = url.slice(0, -1);
  }

  url = url.split('/').map(function (name, i) {
    return i === 0 ? names.index : names[name];
  });
  var rootIndex = url.findIndex(function (x) {
    return x.id === (rootPage === null || rootPage === void 0 ? void 0 : rootPage.id);
  });
  var links = rootIndex !== -1 ? url.slice(rootIndex) : url;
  return {
    links: links,
    url: url
  };
};

var _default = getLinks;
exports["default"] = _default;