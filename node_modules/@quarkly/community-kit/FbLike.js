"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

var _reactFacebook = require("react-facebook");

var _ComponentNotice = _interopRequireDefault(require("./ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDebounce = function useDebounce(value) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

  var _useState = (0, _react.useState)(value),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  (0, _react.useEffect)(function () {
    var handler = setTimeout(function () {
      return setState(value);
    }, timeout);
    return function () {
      return clearTimeout(handler);
    };
  }, [value, timeout]);
  return state;
};

var FacebookLike = function FacebookLike(_ref) {
  var appId = _ref.appId,
      href = _ref.href,
      language = _ref.language,
      colorScheme = _ref.colorScheme,
      showShare = _ref.showShare,
      showFaces = _ref.showFaces,
      layout = _ref.layout,
      size = _ref.size,
      action = _ref.action,
      kidDirectedSite = _ref.kidDirectedSite,
      referral = _ref.referral,
      props = _objectWithoutProperties(_ref, ["appId", "href", "language", "colorScheme", "showShare", "showFaces", "layout", "size", "action", "kidDirectedSite", "referral"]);

  var dAppID = useDebounce(appId);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, props, dAppID ? /*#__PURE__*/_react["default"].createElement(_reactFacebook.FacebookProvider, {
    key: dAppID + language,
    appId: dAppID,
    language: language
  }, /*#__PURE__*/_react["default"].createElement(_reactFacebook.Like, {
    colorScheme: colorScheme,
    share: showShare === 'show',
    showFaces: showFaces,
    href: href,
    layout: layout,
    size: size,
    action: action,
    kidDirectedSite: kidDirectedSite,
    referral: referral
  })) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add your Facebook App ID in the Props panel"
  }));
};

var propInfo = {
  appId: {
    title: {
      en: 'Facebook app ID',
      ru: 'ID приложения Facebook'
    },
    control: 'input',
    type: 'text',
    category: ' Main',
    weight: 1
  },
  href: {
    title: {
      en: 'Link to the page',
      ru: 'Ссылка на страницу'
    },
    control: 'input',
    type: 'text',
    category: ' Main',
    weight: 1
  },
  language: {
    title: {
      en: 'Widget language',
      ru: 'Язык загружаемого виджета'
    },
    control: 'select',
    variants: [{
      title: 'English',
      value: 'en_US'
    }, {
      title: 'Русский',
      value: 'ru_RU'
    }],
    category: ' Main',
    weight: 1
  },
  colorScheme: {
    title: {
      en: 'Color scheme',
      ru: 'Цветовая схема'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Light',
        ru: 'Светлая'
      },
      value: 'light'
    }, {
      title: {
        en: 'Dark',
        ru: 'Тёмная'
      },
      value: 'dark'
    }],
    category: 'Button',
    weight: 1
  },
  showShare: {
    title: {
      en: "'Share' button",
      ru: 'Кнопка "Поделиться"'
    },
    control: 'radio-group',
    variants: [{
      title: {
        en: 'Show',
        ru: 'Показать'
      },
      value: 'show'
    }, {
      title: {
        en: 'Hide',
        ru: 'Скрыть'
      },
      value: 'hide'
    }],
    category: 'Button',
    weight: 1
  },
  layout: {
    title: {
      en: 'Layout',
      ru: 'Макет'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Default layout',
        ru: 'Стандартный вид'
      },
      value: 'standard'
    }, {
      title: {
        en: 'Container with counter',
        ru: 'Контейнер со счётчиком'
      },
      value: 'box_count'
    }, {
      title: {
        en: 'Button with counter',
        ru: 'Кнопка со счётчиком'
      },
      value: 'button_count'
    }, {
      title: {
        en: 'Simple button',
        ru: 'Простая кнопка'
      },
      value: 'button'
    }],
    category: 'Button',
    weight: 1
  },
  size: {
    title: {
      en: 'Button size',
      ru: 'Размер кнопки'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Small',
        ru: 'Маленькая'
      },
      value: 'small'
    }, {
      title: {
        en: 'Large',
        ru: 'Большая'
      },
      value: 'large'
    }],
    category: 'Button',
    weight: 1
  },
  action: {
    title: {
      en: 'On click action',
      ru: 'Действие по клику'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Like',
        ru: 'Like'
      },
      value: 'like'
    }, {
      title: {
        en: 'Recommend',
        ru: 'Recommend'
      },
      value: 'recommend'
    }],
    category: 'Button',
    weight: 1
  },
  kidDirectedSite: {
    title: {
      en: 'Site for kids',
      ru: 'Сайт для детей'
    },
    control: 'checkbox',
    category: 'Advanced',
    weight: 1
  },
  referral: {
    title: {
      en: 'UTM tag',
      ru: 'UTM-метка'
    },
    control: 'input',
    type: 'text',
    category: 'Advanced',
    weight: 1
  }
};
var defaultProps = {
  language: 'en_US',
  colorScheme: 'light',
  showShare: 'hide',
  layout: 'standard',
  size: 'small',
  action: 'like',
  kidDirectedSite: false,
  showFaces: false
};
Object.assign(FacebookLike, {
  title: 'Facebook Like',
  description: {
    en: 'Use this component to add a "Like" button on Facebook',
    ru: 'Компонент для добавления кнопки «Нравится» Facebook'
  },
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = FacebookLike;
exports["default"] = _default;