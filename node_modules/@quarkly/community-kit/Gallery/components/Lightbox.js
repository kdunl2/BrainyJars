"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _io = require("react-icons/io");

var _utils = require("../../utils");

var _Loader = _interopRequireDefault(require("./Loader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var overrides = {
  Overlay: {
    kind: 'Box',
    props: {
      display: 'flex',
      'align-items': 'center',
      'justify-content': 'center',
      background: 'rgba(0, 0, 0, .7)',
      position: 'fixed',
      bottom: 0,
      right: 0,
      left: 0,
      top: 0
    }
  },
  'Overlay :open': {
    kind: 'Box',
    props: {
      opacity: 1,
      visibility: 'visible',
      'transition-duration': '.7s',
      'transition-property': 'opacity, visibility, z-index',
      'z-index': 110
    }
  },
  'Overlay :close': {
    kind: 'Box',
    props: {
      opacity: 0,
      visibility: 'hidden',
      'transition-duration': '.7s',
      'transition-property': 'opacity, visibility, z-index',
      'z-index': -1
    }
  },
  Image: {
    kind: 'Lightbox Image',
    props: {
      margin: '0 auto',
      'max-width': '80%',
      'max-height': '80%',
      'min-height': '0',
      'min-weight': '0',
      transition: 'all .5s ease'
    }
  },
  Close: {
    kind: 'Icon',
    props: {
      size: '30px',
      color: '#fff',
      position: 'absolute',
      top: '15px',
      right: '20px',
      cursor: 'pointer',
      category: 'io',
      defaultIcon: _io.IoMdClose,
      'z-index': '124'
    }
  },
  Loader: {
    kind: 'Icon'
  }
};
var zoomInStyles = {
  'max-width': '100%',
  'max-height': '100%',
  cursor: 'zoom-out'
};
var zoomOutStyles = {
  'max-width': '80%',
  'max-height': '80%',
  cursor: 'zoom-in'
};
var openStyles = {
  opacity: 1,
  visibility: 'visible',
  transform: 'scale(1)',
  'transition-duration': '.5s',
  'transition-timing-function': 'ease-in-out',
  'transition-property': 'opacity, visibility, z-index, transform, max-height, max-width',
  'z-index': 110
};
var closedStyles = {
  opacity: 0,
  visibility: 'hidden',
  transform: 'scale(.9)',
  'transition-duration': '.5s',
  'transition-timing-function': 'ease-in-out',
  'transition-property': 'opacity, visibility, z-index, transform, max-height, max-width',
  'z-index': -1
};

var stopEventClick = function stopEventClick(e) {
  return e.stopPropagation();
};

var Lightbox = function Lightbox(_ref) {
  var defaultFullImageSrc = _ref.defaultFullImageSrc,
      someImageFullParams = _ref.someImageFullParams,
      setSomeImageFullParams = _ref.setSomeImageFullParams,
      isOpen = _ref.isOpen,
      setOpen = _ref.setOpen,
      isBigImage = _ref.isBigImage,
      setBigImage = _ref.setBigImage,
      isZoom = _ref.isZoom,
      setZoom = _ref.setZoom,
      offScrollProp = _ref.offScrollProp,
      isPreviewClicked = _ref.isPreviewClicked,
      setPreviewClicked = _ref.setPreviewClicked,
      loadImage = _ref.loadImage,
      hideLoaderFullImage = _ref.hideLoaderFullImage,
      props = _objectWithoutProperties(_ref, ["defaultFullImageSrc", "someImageFullParams", "setSomeImageFullParams", "isOpen", "setOpen", "isBigImage", "setBigImage", "isZoom", "setZoom", "offScrollProp", "isPreviewClicked", "setPreviewClicked", "loadImage", "hideLoaderFullImage"]);

  var _useState = (0, _react.useState)(true),
      _useState2 = _slicedToArray(_useState, 2),
      isLoadingFullImage = _useState2[0],
      setLoadingFullImage = _useState2[1];

  (0, _react.useEffect)(function () {
    if (!isOpen) _utils.toggleScroll.enable();
  }, [isOpen]);
  var closeLightbox = (0, _react.useCallback)(function () {
    setOpen(false);
    setTimeout(function () {
      setSomeImageFullParams({});
      setZoom(false);
      setLoadingFullImage(true);
      setBigImage(false);
      setPreviewClicked(false);
      if (offScrollProp) _utils.toggleScroll.enable();
    }, 300);
  }, [offScrollProp, setBigImage, setOpen, setPreviewClicked, setSomeImageFullParams, setZoom]);
  var closeImageOnEsc = (0, _react.useCallback)(function (e) {
    if (e.keyCode === 27) closeLightbox();
  }, [closeLightbox]);
  var zoomImage = (0, _react.useCallback)(function (e) {
    stopEventClick(e);
    setZoom(!isZoom);
  }, [isZoom, setZoom]);
  (0, _react.useEffect)(function () {
    if (isPreviewClicked) {
      setOpen(true);
      loadImage(someImageFullParams.src || defaultFullImageSrc).then(function (img) {
        setLoadingFullImage(false);
        if (offScrollProp) _utils.toggleScroll.disable();
        if (img.width > window.innerWidth) setBigImage(true);
      });
      window.addEventListener('keydown', closeImageOnEsc);
      return function () {
        return window.removeEventListener('keydown', closeImageOnEsc);
      };
    }

    closeLightbox();
  }, [defaultFullImageSrc, someImageFullParams.src, isPreviewClicked, loadImage, setOpen, setBigImage, offScrollProp, closeLightbox, closeImageOnEsc]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, rest, /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    onClick: closeLightbox
  }, override('Overlay', "Overlay ".concat(isOpen ? ':open' : ':close'))), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, _extends({
    onClick: closeLightbox
  }, override('Close'))), /*#__PURE__*/_react["default"].createElement(_widgets.Image, _extends({}, override('Image'), isZoom ? isBigImage && zoomInStyles : isBigImage && zoomOutStyles, isOpen ? openStyles : closedStyles, {
    src: isLoadingFullImage ? '' : someImageFullParams.src || defaultFullImageSrc,
    title: someImageFullParams.title,
    alt: someImageFullParams.alt,
    srcset: someImageFullParams.srcset,
    sizes: someImageFullParams.sizes,
    "object-fit": someImageFullParams['object-fit'],
    "object-position": someImageFullParams['object-position'],
    loading: someImageFullParams.loading,
    onClick: zoomImage
  })), !hideLoaderFullImage && /*#__PURE__*/_react["default"].createElement(_Loader["default"], _extends({}, override('Loader'), {
    isLoading: isLoadingFullImage
  }))));
};

Object.assign(Lightbox, {
  overrides: overrides
});
var _default = Lightbox;
exports["default"] = _default;