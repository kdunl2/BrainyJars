"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _Loader = _interopRequireDefault(require("./Loader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var overrides = {
  Loader: {
    kind: 'Icon'
  }
};

var Item = function Item(_ref) {
  var columsNumb = _ref.columsNumb,
      rowsNumb = _ref.rowsNumb,
      stretchFull = _ref.stretchFull,
      showFullImage = _ref.showFullImage,
      previewSrc = _ref.previewSrc,
      previewSrcSet = _ref.previewSrcSet,
      previewSizes = _ref.previewSizes,
      previewAlt = _ref.previewAlt,
      previewTitle = _ref.previewTitle,
      previewObjectFit = _ref.previewObjectFit,
      previewObjectPosition = _ref.previewObjectPosition,
      previewLoading = _ref.previewLoading,
      fullSrc = _ref.fullSrc,
      fullSrcSet = _ref.fullSrcSet,
      fullSizes = _ref.fullSizes,
      fullAlt = _ref.fullAlt,
      fullTitle = _ref.fullTitle,
      fullObjectFit = _ref.fullObjectFit,
      fullObjectPosition = _ref.fullObjectPosition,
      fullLoading = _ref.fullLoading,
      defaultPreviewImageSrc = _ref.defaultPreviewImageSrc,
      index = _ref.index,
      loadImage = _ref.loadImage,
      addImageParams = _ref.addImageParams,
      setOpen = _ref.setOpen,
      galleryItemWidth = _ref.galleryItemWidth,
      setSomeImageFullParams = _ref.setSomeImageFullParams,
      setPreviewClicked = _ref.setPreviewClicked,
      aspectRatioProp = _ref.aspectRatioProp,
      imagesMinWidth = _ref.imagesMinWidth,
      imagesMaxWidth = _ref.imagesMaxWidth,
      autoFillInProp = _ref.autoFillInProp,
      columnsCountProp = _ref.columnsCountProp,
      borderWidthProp = _ref.borderWidthProp,
      hideLoaderPreviewImage = _ref.hideLoaderPreviewImage,
      props = _objectWithoutProperties(_ref, ["columsNumb", "rowsNumb", "stretchFull", "showFullImage", "previewSrc", "previewSrcSet", "previewSizes", "previewAlt", "previewTitle", "previewObjectFit", "previewObjectPosition", "previewLoading", "fullSrc", "fullSrcSet", "fullSizes", "fullAlt", "fullTitle", "fullObjectFit", "fullObjectPosition", "fullLoading", "defaultPreviewImageSrc", "index", "loadImage", "addImageParams", "setOpen", "galleryItemWidth", "setSomeImageFullParams", "setPreviewClicked", "aspectRatioProp", "imagesMinWidth", "imagesMaxWidth", "autoFillInProp", "columnsCountProp", "borderWidthProp", "hideLoaderPreviewImage"]);

  var boxRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)(true),
      _useState2 = _slicedToArray(_useState, 2),
      isLoadingPreview = _useState2[0],
      setLoadingPreview = _useState2[1];

  var _useState3 = (0, _react.useState)({
    width: 'auto',
    height: 'auto'
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      aspectRatioStyles = _useState4[0],
      setAspectRatioStyles = _useState4[1];

  var fullImageParam = (0, _react.useMemo)(function () {
    return {
      src: fullSrc || previewSrc,
      srcset: fullSrcSet,
      sizes: fullSizes,
      alt: fullAlt,
      title: fullTitle,
      'object-position': fullObjectFit,
      'object-fit': fullObjectPosition,
      loading: fullLoading
    };
  }, [previewSrc, fullSrc, fullSrcSet, fullSizes, fullAlt, fullTitle, fullObjectFit, fullObjectPosition, fullLoading]);
  var correctSrcPreview = previewSrc || defaultPreviewImageSrc;
  (0, _react.useEffect)(function () {
    setPreviewClicked(showFullImage);
    setSomeImageFullParams(fullImageParam);
  }, [showFullImage, fullImageParam, setPreviewClicked, setSomeImageFullParams]);
  (0, _react.useEffect)(function () {
    loadImage(correctSrcPreview).then(function () {
      setLoadingPreview(false);
    });
  }, [loadImage, correctSrcPreview, setLoadingPreview]);
  (0, _react.useEffect)(function () {
    addImageParams(index, {
      fullSrc: fullSrc,
      fullSrcSet: fullSrcSet,
      fullSizes: fullSizes,
      fullAlt: fullAlt,
      fullTitle: fullTitle,
      fullObjectFit: fullObjectFit,
      fullObjectPosition: fullObjectPosition,
      fullLoading: fullLoading
    });
  }, [addImageParams, index, fullSrc, fullSrcSet, fullSizes, fullAlt, fullTitle, fullObjectFit, fullObjectPosition, fullLoading]);
  var openGalleryItem = (0, _react.useCallback)(function () {
    setSomeImageFullParams(fullImageParam);
    setPreviewClicked(true);
  }, [fullImageParam, setPreviewClicked, setSomeImageFullParams]);
  var changeAspectRatio = (0, _react.useCallback)(function (aspectRatio, itemSize) {
    var params = {
      width: itemSize.width,
      height: itemSize.height
    };

    if (aspectRatio === 'auto') {
      params.height = 'auto';
      params.width = 'auto';
    } else {
      var _aspectRatio$split = aspectRatio.split(':'),
          _aspectRatio$split2 = _slicedToArray(_aspectRatio$split, 2),
          width = _aspectRatio$split2[0],
          height = _aspectRatio$split2[1];

      params.height = height * params.width / width;
    }

    setAspectRatioStyles(params);
  }, []);
  (0, _react.useEffect)(function () {
    if (!boxRef.current) return;
    var itemSize = boxRef.current.getBoundingClientRect();
    changeAspectRatio(aspectRatioProp, itemSize);
  }, [changeAspectRatio, aspectRatioProp]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    ref: boxRef,
    height: "auto",
    "min-width": "auto",
    "min-height": "auto",
    position: "relative",
    display: "flex",
    "grid-column": "span ".concat(columsNumb),
    "grid-row": "span ".concat(rowsNumb)
  }, rest), isLoadingPreview ? /*#__PURE__*/_react["default"].createElement(_widgets.Image, _extends({
    "max-width": "100%",
    "max-height": "100%",
    "min-width": stretchFull ? '100%' : 'auto',
    "min-height": stretchFull ? '100%' : 'auto',
    "object-fit": stretchFull ? 'cover' : previewObjectFit,
    opacity: "0",
    onClick: openGalleryItem
  }, aspectRatioStyles)) : /*#__PURE__*/_react["default"].createElement(_widgets.Image, _extends({
    "max-width": "100%",
    "max-height": "100%",
    "min-width": stretchFull ? '100%' : 'auto',
    "min-height": stretchFull ? '100%' : 'auto',
    "object-fit": stretchFull ? 'cover' : previewObjectFit,
    opacity: "1",
    src: correctSrcPreview,
    srcset: previewSrcSet,
    title: previewTitle,
    alt: previewAlt,
    sizes: previewSizes,
    "object-position": previewObjectPosition,
    loading: previewLoading,
    onClick: openGalleryItem
  }, aspectRatioStyles)), !hideLoaderPreviewImage && /*#__PURE__*/_react["default"].createElement(_Loader["default"], _extends({}, override('Loader'), {
    isLoading: isLoadingPreview
  })));
};

var propInfo = {
  columsNumb: {
    title: {
      en: 'Width in columns',
      ru: 'Ширина в столбцах'
    },
    control: 'input',
    category: 'Main',
    weight: 0.5
  },
  rowsNumb: {
    title: {
      en: 'Height in rows',
      ru: 'Высота в колонках'
    },
    control: 'input',
    category: 'Main',
    weight: 0.5
  },
  stretchFull: {
    title: {
      en: 'Stretch an image to container size',
      ru: 'Растянуть изображение до размера контейнера'
    },
    control: 'checkbox',
    category: 'images',
    weight: 1
  },
  showFullImage: {
    title: {
      en: 'Show full image',
      ru: 'Показать полное изображение'
    },
    control: 'checkbox',
    category: 'images',
    weight: 1
  },
  previewSrc: {
    title: 'Src',
    description: {
      en: 'Image address',
      ru: 'Адрес изображения'
    },
    control: 'image',
    category: 'Image preview',
    weight: 1
  },
  previewSrcSet: {
    title: 'Srcset',
    description: {
      en: 'A string which identifies one or more image sources with descriptors',
      ru: 'Строка, определяющая один или несколько источников изображений с дескрипторами'
    },
    control: 'srcSet',
    multiply: true,
    category: 'Image preview',
    weight: 1
  },
  previewSizes: {
    title: 'Sizes',
    description: {
      en: 'Image slot sizes from srcSet for different breakpoints',
      ru: 'Размеры контейнера изображения из srcSet для различных брейкпоинтов'
    },
    control: 'sizes',
    multiply: true,
    category: 'Image preview',
    weight: 1
  },
  previewAlt: {
    title: 'Alt',
    description: {
      en: 'A piece of text that appears when an image cannot be displayed',
      ru: 'Текст, который будет отображаться когда изображение недоступно'
    },
    control: 'input',
    category: 'Image preview',
    weight: 1
  },
  previewTitle: {
    title: 'Title',
    description: {
      en: 'Additional information for the element that appears as a tooltip',
      ru: 'Описывает содержимое элемента в виде всплывающей подсказки'
    },
    control: 'input',
    category: 'Image preview',
    weight: 1
  },
  previewObjectFit: {
    title: 'Object fit',
    description: {
      en: 'Defines how the content of the replaced element should be resized to fit its container',
      ru: 'Определяет как содержимое заменяемого элемента должно заполнять контейнер'
    },
    control: 'select',
    variants: ['fill', 'contain', 'cover', 'none', 'scale-down'],
    category: 'Image preview',
    weight: 1
  },
  previewObjectPosition: {
    title: 'Object position',
    description: {
      en: 'Specifies the alignment of the selected replaced element contents within the element box relative to the X and Y coordinate axes',
      ru: 'Задаёт положение содержимого замещаемого элемента внутри контейнера относительно координатных осей X и Y'
    },
    control: 'input',
    category: 'Image preview',
    weight: 1
  },
  previewLoading: {
    title: 'Loading',
    description: {
      en: 'Indicates how the browser should load the image',
      ru: 'Указывает как браузер должен загружать изображение'
    },
    control: 'select',
    variants: ['eager', 'lazy'],
    category: 'Image preview',
    weight: 1
  },
  fullSrc: {
    title: 'Src',
    description: {
      en: 'Image address',
      ru: 'Адрес изображения'
    },
    control: 'image',
    category: ' Image Full',
    weight: 1
  },
  fullSrcSet: {
    title: 'Srcset',
    description: {
      en: 'A string which identifies one or more image sources with descriptors',
      ru: 'Строка, определяющая один или несколько источников изображений с дескрипторами'
    },
    control: 'srcSet',
    multiply: true,
    category: ' Image Full',
    weight: 1
  },
  fullSizes: {
    title: 'Sizes',
    description: {
      en: 'Image slot sizes from srcSet for different breakpoints',
      ru: 'Размеры контейнера изображения из srcSet для различных брейкпоинтов'
    },
    control: 'sizes',
    multiply: true,
    category: ' Image Full',
    weight: 1
  },
  fullAlt: {
    title: 'Alt',
    description: {
      en: 'A piece of text that appears when an image cannot be displayed',
      ru: 'Текст, который будет отображаться когда изображение недоступно'
    },
    control: 'input',
    category: ' Image Full',
    weight: 1
  },
  fullTitle: {
    title: 'Title',
    description: {
      en: 'Additional information for the element that appears as a tooltip',
      ru: 'Описывает содержимое элемента в виде всплывающей подсказки'
    },
    control: 'input',
    category: ' Image Full',
    weight: 1
  },
  fullObjectFit: {
    title: 'Object fit',
    description: {
      en: 'Defines how the content of the replaced element should be resized to fit its container',
      ru: 'Определяет, как содержимое заменяемого элемента должно заполнять контейнер'
    },
    control: 'select',
    variants: ['fill', 'contain', 'cover', 'none', 'scale-down'],
    category: ' Image Full',
    weight: 1
  },
  fullObjectPosition: {
    title: 'Object position',
    description: {
      en: 'Specifies the alignment of the selected replaced element contents within the element box relative to the X and Y coordinate axes',
      ru: 'Задаёт положение содержимого замещаемого элемента внутри контейнера относительно координатных осей X и Y'
    },
    control: 'input',
    category: ' Image Full',
    weight: 1
  },
  fullLoading: {
    title: 'Loading',
    description: {
      en: 'Indicates how the browser should load the image',
      ru: 'Указывает как браузер должен загружать изображение'
    },
    control: 'select',
    variants: ['eager', 'lazy'],
    category: ' Image Full',
    weight: 1
  }
};
var defaultProps = {
  columsNumb: 1,
  rowsNumb: 1,
  stretchFull: true,
  showFullImage: false
};
Object.assign(Item, {
  overrides: overrides,
  propInfo: propInfo,
  defaultProps: defaultProps,
  effects: {
    hover: ':hover'
  }
});
var _default = Item;
exports["default"] = _default;