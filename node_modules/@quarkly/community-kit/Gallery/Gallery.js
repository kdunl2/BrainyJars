"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _resizeObserver = _interopRequireDefault(require("@react-hook/resize-observer"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _props = require("./props");

var _Item = _interopRequireDefault(require("./components/Item"));

var _Lightbox = _interopRequireDefault(require("./components/Lightbox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var windowHeightVisible = 1.5;
var defaultPreviewImageSrc = 'https://via.placeholder.com/500';
var defaultFullImageSrc = 'https://via.placeholder.com/1200';

var loadImage = function loadImage(url) {
  return new Promise(function (resolve) {
    var img = document.createElement('img');
    img.addEventListener('load', function () {
      return resolve(img);
    });
    img.src = url;
  });
};

var strToNumb = function strToNumb(str) {
  var reg = /^[\d.,]+$/;
  var newStr = str.replace(/\s/g, '');
  if (reg.test(newStr)) return "".concat(parseInt(newStr, 10), "px");
  return "".concat(newStr);
};

var getAPI = function getAPI() {
  if (typeof window !== 'undefined') return window.QAPI || {};
  if (typeof global !== 'undefined') return global.QAPI || {};
  return {};
};

var Gallery = function Gallery(_ref) {
  var galleryItemNumbProp = _ref.galleryItemNumbProp,
      columnsCountProp = _ref.columnsCountProp,
      aspectRatioProp = _ref.aspectRatioProp,
      loaderFormatProp = _ref.loaderFormatProp,
      autoFillInProp = _ref.autoFillInProp,
      imagesMaxWidthProp = _ref.imagesMaxWidthProp,
      imagesMinWidthProp = _ref.imagesMinWidthProp,
      borderWidthProp = _ref.borderWidthProp,
      offScrollProp = _ref.offScrollProp,
      hideLoaderPreviewImage = _ref.hideLoaderPreviewImage,
      hideLoaderFullImage = _ref.hideLoaderFullImage,
      props = _objectWithoutProperties(_ref, ["galleryItemNumbProp", "columnsCountProp", "aspectRatioProp", "loaderFormatProp", "autoFillInProp", "imagesMaxWidthProp", "imagesMinWidthProp", "borderWidthProp", "offScrollProp", "hideLoaderPreviewImage", "hideLoaderFullImage"]);

  var galleryRef = (0, _react.useRef)(null);
  var picturesParamsRef = (0, _react.useRef)([]);
  var lastRan = (0, _react.useRef)(Date.now());
  var scrollLoadCountRef = (0, _react.useRef)(1);
  var clickLoadCountRef = (0, _react.useRef)(1);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isZoom = _useState4[0],
      setZoom = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isBigImage = _useState6[0],
      setBigImage = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isPreviewClicked = _useState8[0],
      setPreviewClicked = _useState8[1];

  var _useState9 = (0, _react.useState)(null),
      _useState10 = _slicedToArray(_useState9, 2),
      galleryItemWidth = _useState10[0],
      setGalleryItemWidth = _useState10[1];

  var _useState11 = (0, _react.useState)(galleryItemNumbProp),
      _useState12 = _slicedToArray(_useState11, 2),
      itemsLoadingNumb = _useState12[0],
      setItemsLoadingNumb = _useState12[1];

  var _useState13 = (0, _react.useState)(loaderFormatProp === 'click'),
      _useState14 = _slicedToArray(_useState13, 2),
      isButtonVisible = _useState14[0],
      setButtonVisible = _useState14[1];

  var _useState15 = (0, _react.useState)({}),
      _useState16 = _slicedToArray(_useState15, 2),
      someImageFullParams = _useState16[0],
      setSomeImageFullParams = _useState16[1];

  var imagesMaxWidth = (0, _react.useMemo)(function () {
    return strToNumb(imagesMaxWidthProp);
  }, [imagesMaxWidthProp]);
  var imagesMinWidth = (0, _react.useMemo)(function () {
    return strToNumb(imagesMinWidthProp);
  }, [imagesMinWidthProp]);
  var addImageParams = (0, _react.useCallback)(function (index, data) {
    picturesParamsRef.current[index] = {
      src: data.srcFull,
      srcset: data.srcSetFull,
      sizes: data.sizesFull,
      alt: data.altFull,
      title: data.titleFull,
      objectFit: data.objectFitFull,
      objectPosition: data.objectPositionFull,
      loading: data.loadingFull
    };
  }, []);
  var throttledEffect = (0, _react.useCallback)(function (callback, delay) {
    lastRan.current = Date.now();
    var handler = setTimeout(function () {
      if (Date.now() - lastRan.current >= delay) {
        callback();
        lastRan.current = Date.now();
      }
    }, delay - (Date.now() - lastRan.current));
    return function () {
      return clearTimeout(handler);
    };
  }, []);
  var getItemWidth = (0, _react.useCallback)(function (galleryWidth) {
    return (galleryWidth - (columnsCountProp - 1) * borderWidthProp) / columnsCountProp;
  }, [columnsCountProp, borderWidthProp]);
  var handleResize = (0, _react.useCallback)(function (entry) {
    throttledEffect(function () {
      var galleryWidth = entry.contentRect.width;
      var imageWidth = getItemWidth(galleryWidth);
      setGalleryItemWidth(imageWidth);
    }, 100);
  }, [throttledEffect, getItemWidth, setGalleryItemWidth]);
  (0, _resizeObserver["default"])(galleryRef, handleResize);
  var galleryItemCountNumb = (0, _react.useMemo)(function () {
    return parseInt(galleryItemNumbProp, 10);
  }, [galleryItemNumbProp]);
  var getItemCountOnView = (0, _react.useCallback)(function (galleryWidth) {
    var visibleSpace = window.innerHeight * windowHeightVisible;
    var visibleRows = Math.ceil(visibleSpace / getItemWidth(galleryWidth));
    var items = visibleRows * columnsCountProp;
    return items > galleryItemCountNumb ? galleryItemCountNumb : items;
  }, [getItemWidth, galleryItemCountNumb, columnsCountProp]);
  var loadMore = (0, _react.useCallback)(function (type) {
    if (!galleryRef.current) return;
    var galleryRect = galleryRef.current.getBoundingClientRect();
    var itemsCount = getItemCountOnView(galleryRect.width);
    var newItems;
    if (type === 'scroll') newItems = itemsCount + itemsCount * scrollLoadCountRef.current;
    if (type === 'click') newItems = itemsCount + itemsCount * clickLoadCountRef.current;

    if (newItems < galleryItemNumbProp) {
      setItemsLoadingNumb(newItems);
      if (type === 'scroll') scrollLoadCountRef.current += 1;
      if (type === 'click') clickLoadCountRef.current += 1;
    } else {
      setItemsLoadingNumb(galleryItemCountNumb);
      setButtonVisible(false);
    }
  }, [galleryItemCountNumb, getItemCountOnView, galleryItemNumbProp]);
  var loadOnClick = (0, _react.useCallback)(function () {
    if (!galleryRect.current) return;
    var galleryRect = galleryRef.current.getBoundingClientRect();

    if (galleryRect.bottom - window.innerHeight / 2 < window.innerHeight) {
      loadMore('click');
    }
  }, [loadMore]);
  var loadOnScroll = (0, _react.useCallback)(function () {
    if (!galleryRect.current) return;
    var galleryRect = galleryRef.current.getBoundingClientRect();
    var itemsCount = getItemCountOnView(galleryRect.width);
    var newItems = itemsCount + itemsCount * scrollLoadCountRef.current;

    if (galleryRect.bottom - window.innerHeight / 2 < window.innerHeight) {
      loadMore('scroll');

      if (newItems > galleryItemCountNumb) {
        window.removeEventListener('scroll', loadOnScroll);
        window.removeEventListener('resize', loadOnScroll);
        window.removeEventListener('orientationchange', loadOnScroll);
      }
    }
  }, [galleryItemCountNumb, getItemCountOnView, loadMore]);
  (0, _react.useEffect)(function () {
    if (!galleryRef.current) return;
    var galleryRect = galleryRef.current.getBoundingClientRect();
    var itemsCount = getItemCountOnView(galleryRect.width);

    var _getAPI = getAPI(),
        mode = _getAPI.mode;

    if (mode === 'development') {
      if (loaderFormatProp === 'all' || loaderFormatProp === 'scroll') {
        setItemsLoadingNumb(galleryItemCountNumb);
        setButtonVisible(false);
      } else if (loaderFormatProp === 'click') {
        setItemsLoadingNumb(itemsCount);
        setButtonVisible(itemsCount !== galleryItemCountNumb);
      }
    } else if (mode === 'production') {
      if (loaderFormatProp === 'all') {
        setItemsLoadingNumb(galleryItemCountNumb);
        setButtonVisible(false);
      } else if (loaderFormatProp === 'scroll') {
        window.addEventListener('scroll', loadOnScroll);
        window.addEventListener('resize', loadOnScroll);
        window.addEventListener('orientationchange', loadOnScroll);
        setButtonVisible(false);
        setItemsLoadingNumb(itemsCount);
      } else if (loaderFormatProp === 'click') {
        setItemsLoadingNumb(itemsCount);
        setButtonVisible(itemsCount !== galleryItemCountNumb);
      }
    }

    return function () {
      window.removeEventListener('scroll', loadOnScroll);
      window.removeEventListener('resize', loadOnScroll);
      window.removeEventListener('orientationchange', loadOnScroll);
    };
  }, [galleryItemCountNumb, getItemCountOnView, loadOnScroll, loaderFormatProp]);

  var _useOverrides = (0, _components.useOverrides)(props, _props.overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var items = Array(itemsLoadingNumb > 0 ? parseInt(itemsLoadingNumb, 10) : 0).fill().map(function (item, index) {
    return /*#__PURE__*/_react["default"].createElement(_Item["default"], _extends({}, override("Item", "Item ".concat(index), {
      defaultKey: "Item ".concat(index)
    }), {
      key: "".concat(rest['data-qid'], "-item-").concat(index) // eslint-disable-line
      ,
      index: index,
      loadImage: loadImage,
      addImageParams: addImageParams,
      setOpen: setOpen,
      galleryItemWidth: galleryItemWidth,
      setSomeImageFullParams: setSomeImageFullParams,
      setPreviewClicked: setPreviewClicked,
      aspectRatioProp: aspectRatioProp,
      imagesMaxWidth: imagesMaxWidth,
      imagesMinWidth: imagesMinWidth,
      autoFillInProp: autoFillInProp,
      columnsCountProp: columnsCountProp,
      borderWidthProp: borderWidthProp,
      hideLoaderPreviewImage: hideLoaderPreviewImage,
      defaultPreviewImageSrc: defaultPreviewImageSrc,
      defaultFullImageSrc: defaultFullImageSrc
    }));
  });
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, rest, /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    ref: galleryRef,
    display: "grid",
    "grid-gap": "".concat(strToNumb(borderWidthProp)),
    "grid-auto-flow": autoFillInProp ? 'dense' : 'row',
    "grid-template-columns": "repeat(".concat(columnsCountProp, ",\n          minmax(").concat(imagesMinWidth, ",\n          ").concat(imagesMaxWidth, "))")
  }, items), /*#__PURE__*/_react["default"].createElement(_widgets.Button, _extends({
    onClick: loadOnClick
  }, override("Button More", "Button More ".concat(isButtonVisible ? ':visible' : ':hidden'))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Button Text'), override('Button Text').children)), /*#__PURE__*/_react["default"].createElement(_Lightbox["default"], _extends({}, override("Lightbox"), {
    loadImage: loadImage,
    someImageFullParams: someImageFullParams,
    setSomeImageFullParams: setSomeImageFullParams,
    isOpen: isOpen,
    setOpen: setOpen,
    isBigImage: isBigImage,
    setBigImage: setBigImage,
    isZoom: isZoom,
    setZoom: setZoom,
    offScrollProp: offScrollProp,
    isPreviewClicked: isPreviewClicked,
    setPreviewClicked: setPreviewClicked,
    defaultFullImageSrc: defaultFullImageSrc,
    hideLoaderFullImage: hideLoaderFullImage
  })));
};

Object.assign(Gallery, {
  title: 'Gallery',
  description: {
    en: 'This component contains images and can be used to show a portfolio, services, or products',
    ru: 'Компонент для демонстрации портфолио, иллюстрации услуг и товаров'
  },
  overrides: _props.overrides,
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});
var _default = Gallery;
exports["default"] = _default;