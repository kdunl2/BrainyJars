"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useTabs = void 0;

var _react = _interopRequireWildcard(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _widgets = require("@quarkly/widgets");

var _components = require("@quarkly/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var append = function append(array, element) {
  var index = array.findIndex(function (v) {
    return element.index < v.index;
  });
  return index !== -1 ? [].concat(_toConsumableArray(array.slice(0, index)), [element], _toConsumableArray(array.slice(index, array.length))) : [].concat(_toConsumableArray(array), [element]);
};

var remove = function remove(array, element) {
  return array.filter(function (_ref) {
    var index = _ref.index,
        tabId = _ref.tabId;
    return element.index !== index || element.tabId !== tabId;
  });
};

var getNextNode = function getNextNode(node, mode) {
  var first = {
    next: node.parentNode.children[0],
    previous: node.parentNode.lastChild
  }[mode];
  var nextNode = node;

  do {
    nextNode = nextNode["".concat(mode, "ElementSibling")] || first;
  } while (nextNode.disabled);

  return nextNode;
};

var getNextElement = {
  ArrowLeft: function ArrowLeft(node) {
    return getNextNode(node, 'previous');
  },
  ArrowRight: function ArrowRight(node) {
    return getNextNode(node, 'next');
  },
  Home: function Home(t) {
    var node = t.parentNode.children[0];
    return node.disabled ? getNextNode(node, 'next') : node;
  },
  End: function End(t) {
    var node = t.parentNode.lastChild;
    return node.disabled ? getNextNode(node, 'previous') : node;
  }
};
var overrides = {
  Tab: {
    kind: 'Button',
    props: {
      children: 'Tab'
    }
  },
  Tablist: {
    kind: 'Box'
  },
  TabPanels: {
    kind: 'Box'
  }
};
var TabsContext = /*#__PURE__*/(0, _react.createContext)({
  currentTab: '',
  addTab: function addTab() {},
  removeTab: function removeTab() {}
});

var useTabs = function useTabs() {
  return (0, _react.useContext)(TabsContext);
};

exports.useTabs = useTabs;

var SimpleTabs = function SimpleTabs(_ref2) {
  var defaultTab = _ref2.defaultTab,
      props = _objectWithoutProperties(_ref2, ["defaultTab"]);

  var _useState = (0, _react.useState)(defaultTab),
      _useState2 = _slicedToArray(_useState, 2),
      currentTab = _useState2[0],
      setCurrentTab = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      tabs = _useState4[0],
      setTabs = _useState4[1];

  var isInitialMount = (0, _react.useRef)(true);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  (0, _react.useEffect)(function () {
    if (isInitialMount.current) {
      isInitialMount.current = false;
    } else {
      setCurrentTab(defaultTab);
    }
  }, [defaultTab]);
  var addTab = (0, _react.useCallback)(function (tab) {
    if (window.location.hash === "#".concat(tab.tabId)) {
      setCurrentTab(tab.tabId);
    }

    setTabs(function (s) {
      return append(s, tab);
    });
  }, []);
  var removeTab = (0, _react.useCallback)(function (tab) {
    setTabs(function (s) {
      return remove(s, tab);
    });
  }, []);
  var value = {
    currentTab: currentTab,
    removeTab: removeTab,
    addTab: addTab
  };

  var onKeyDown = function onKeyDown(e) {
    var target = e.target,
        key = e.key;

    if (!['ArrowLeft', 'ArrowRight', 'Home', 'End'].includes(key)) {
      return;
    }

    e.preventDefault();
    var nextElement = getNextElement[key](target);
    nextElement.focus();
    nextElement.click();
  };

  var buttons = (0, _react.useMemo)(function () {
    return tabs.map(function (_ref3) {
      var tabId = _ref3.tabId;

      var onClick = function onClick() {
        return setCurrentTab(tabId);
      };

      var selected = currentTab === tabId;
      return /*#__PURE__*/_react["default"].createElement(_widgets.Button, _extends({
        key: "".concat(props.qid, "-").concat(tabId),
        role: "tab",
        tabIndex: selected ? '0' : '-1',
        zIndex: selected ? '2' : '1',
        "aria-selected": selected,
        onClick: onClick
      }, override('Tab', "Tab ".concat(tabId), selected && 'Tab :active')), override("Tab ".concat(tabId)).children || 'Some Text');
    });
  }, [tabs, override, currentTab, props.qid]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, rest, /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    display: "flex",
    onKeyDown: onKeyDown,
    role: "tablist"
  }, override('Tablist')), buttons), /*#__PURE__*/_react["default"].createElement(_widgets.Box, override('TabPanels'), /*#__PURE__*/_react["default"].createElement(TabsContext.Provider, {
    value: value
  }, children.map(function (child, i) {
    return /*#__PURE__*/_react["default"].cloneElement(child, {
      index: i + children.length
    });
  }))));
};

var propInfo = {
  defaultTab: {
    title: 'Default Tab',
    description: {
      en: 'The tabId of the initially selected tab when uncontrolled.'
    },
    control: 'input'
  }
};
var defaultProps = {
  defaultTab: ''
};

var _default = (0, _atomize["default"])(SimpleTabs)({
  name: 'SimpleTabs',
  description: {
    en: 'SimpleTabs make it easy to explore and switch between different views.'
  },
  propInfo: propInfo,
  overrides: overrides
}, defaultProps);

exports["default"] = _default;