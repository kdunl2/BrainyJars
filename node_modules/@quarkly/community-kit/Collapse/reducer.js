"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var reducer = function reducer(state, action) {
  var type = action.type;

  switch (type) {
    case 'TOGGLE':
      if (state.destination !== 'none') return state;
      return _objectSpread(_objectSpread({}, state), {}, {
        destination: state.isOpen ? 'close' : 'open'
      });

    case 'COLLAPSING':
      return _objectSpread(_objectSpread({}, state), {}, {
        isCollapsing: true
      });

    case 'COLLAPSE_END':
      return _objectSpread(_objectSpread({}, state), {}, {
        isCollapsing: false,
        isOpen: state.destination === 'open',
        destination: 'none'
      });

    default:
      // eslint-disable-next-line no-console
      console.warn('Unexpected action in Collapse reducer!');
      return state;
  }
};

var _default = reducer;
exports["default"] = _default;