"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

var _components = require("@quarkly/components");

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var overrides = {
  Row: {
    kind: 'Row'
  },
  Column: {
    kind: 'Column'
  },
  Cell: {
    kind: 'Cell',
    props: {
      padding: '0.4rem 1rem',
      border: '1px solid #E4E8EC'
    }
  },
  Text: {
    kind: 'Text'
  }
};

var Table = _atomize["default"].table();

var THead = _atomize["default"].thead();

var TBody = _atomize["default"].tbody();

var TFoot = _atomize["default"].tfoot();

var Tr = _atomize["default"].tr();

var Td = _atomize["default"].td();

var TableComponent = function TableComponent(_ref) {
  var rowsProp = _ref.rowsProp,
      colsProp = _ref.colsProp,
      showHeader = _ref.showHeader,
      showFooter = _ref.showFooter,
      summary = _ref.summary,
      props = _objectWithoutProperties(_ref, ["rowsProp", "colsProp", "showHeader", "showFooter", "summary"]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var cols = (0, _react.useMemo)(function () {
    return parseInt(colsProp, 10) > 0 ? parseInt(colsProp, 10) : 1;
  }, [colsProp]);
  var rows = (0, _react.useMemo)(function () {
    return parseInt(rowsProp, 10) > 0 ? parseInt(rowsProp, 10) : 1;
  }, [rowsProp]);
  return /*#__PURE__*/_react["default"].createElement(Table, _extends({
    cols: cols,
    summary: summary,
    "background-color": "--white",
    border: "1px solid #E4E8EC",
    "border-collapse": "collapse",
    display: "block"
  }, rest), showHeader && /*#__PURE__*/_react["default"].createElement(THead, override('THead'), /*#__PURE__*/_react["default"].createElement(Tr, override('Row', "Row THead"), Array(cols || 1).fill().map(function (_, col) {
    return /*#__PURE__*/_react["default"].createElement(Td, _extends({
      key: "cell-thead-".concat(col) // eslint-disable-line

    }, override('Cell', "Cell Col-".concat(col), 'Cell THead', "Cell THead Col-".concat(col))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Text', "Text Col-".concat(col), 'Text THead', "Text THead Col-".concat(col), {
      defaultKey: "Text THead Col-".concat(col)
    }), override("Text THead Col-".concat(col)).children || "Cell H-".concat(col)));
  }))), /*#__PURE__*/_react["default"].createElement(TBody, override('TBody'), Array(rows || 1).fill().map(function (_, row) {
    return /*#__PURE__*/_react["default"].createElement(Tr, _extends({
      key: "row".concat(row) // eslint-disable-line

    }, override('Row', "Row TBody-".concat(row))), Array(cols || 1).fill().map(function (__, col) {
      return /*#__PURE__*/_react["default"].createElement(Td, _extends({
        key: "cell-tbody-".concat(row, "-").concat(col) // eslint-disable-line

      }, override('Cell', "Cell Col-".concat(col), 'Cell TBody', "Cell TBody Col-".concat(col), "Cell TBody Row-".concat(row), "Cell TBody Row-".concat(row, " Col-").concat(col))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Text', "Text Col-".concat(col), 'Text TBody', "Text TBody Row-".concat(row), "Text TBody Col-".concat(col), "Text TBody Row-".concat(row, " Col-").concat(col), {
        defaultKey: "Text TBody Row-".concat(row, " Col-").concat(col)
      }), override("Text TBody Row-".concat(row, " Col-").concat(col)).children || "Cell ".concat(row, "-").concat(col)));
    }));
  })), showFooter && /*#__PURE__*/_react["default"].createElement(TFoot, override('TFoot'), /*#__PURE__*/_react["default"].createElement(Tr, override('Row', "Row TFoot"), Array(cols || 1).fill().map(function (_, col) {
    return /*#__PURE__*/_react["default"].createElement(Td, _extends({
      key: "cell-tfoot-".concat(col) // eslint-disable-line

    }, override('Cell', "Cell Col-".concat(col), 'Cell TFoot', "Cell TFoot Col-".concat(col))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Text', "Text Col-".concat(col), 'Text TFoot', "Text TFoot Col-".concat(col), {
      defaultKey: "Text TFoot Col-".concat(col)
    }), override("Text TFoot Col-".concat(col)).children || "Cell F-".concat(col)));
  }))));
};

var propInfo = {
  colsProp: {
    title: {
      en: 'Number of columns',
      ru: 'Количесво колонок'
    },
    control: 'input',
    type: 'number',
    category: 'Size',
    weight: 0.5
  },
  rowsProp: {
    title: {
      en: 'Number of rows',
      ru: 'Количесво строк'
    },
    control: 'input',
    type: 'number',
    category: 'Size',
    weight: 0.5
  },
  showHeader: {
    title: {
      en: 'Display header',
      ru: 'Отображать шапку'
    },
    control: 'checkbox',
    category: 'Groups',
    weight: 0.5
  },
  showFooter: {
    title: {
      en: 'Display footer',
      ru: 'Отображать подвал'
    },
    control: 'checkbox',
    category: 'Groups',
    weight: 0.5
  },
  summary: {
    title: {
      en: 'Short description',
      ru: 'Короткое описание'
    },
    control: 'input',
    type: 'text',
    category: 'SEO',
    weight: 1
  }
};
var defaultProps = {
  colsProp: 8,
  rowsProp: 4
};
Object.assign(TableComponent, {
  title: 'Table',
  description: {
    en: 'This component is a simple table with text cells',
    ru: 'Простая таблица с текстовыми ячейками'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});
var _default = TableComponent;
exports["default"] = _default;