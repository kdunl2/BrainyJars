"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _easyScroll = _interopRequireDefault(require("easy-scroll"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _md = require("react-icons/md");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var throttle = function throttle(fn, wait) {
  var lastTime = 0;
  return function () {
    var now = new Date();

    if (now - lastTime >= wait) {
      fn.apply(void 0, arguments);
      lastTime = now;
    }
  };
};

var useThrottle = function useThrottle(fn) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var cb = arguments.length > 2 ? arguments[2] : undefined;
  var throttled = throttle(fn, wait);
  return (0, _react.useCallback)(throttled, [throttled, cb]);
};

var overrides = {
  Wrapper: {
    kind: 'Box',
    props: {
      'min-height': '0',
      'max-height': '100vh',
      'overflow-y': 'auto'
    }
  },
  Button: {
    kind: 'Button',
    props: {
      bottom: '15px',
      right: '15px',
      padding: '0',
      width: '40px',
      height: '40px',
      color: '--dark',
      background: '--color-lightD2',
      'focus-box-shadow': 'none',
      'border-radius': '50%',
      'justify-content': 'center',
      'align-items': 'center',
      display: 'flex',
      'z-index': '1000',
      type: 'button'
    }
  },
  Icon: {
    kind: 'Icon',
    props: {
      size: '32px',
      category: 'md'
    }
  }
};

var ScrollToTop = function ScrollToTop(_ref) {
  var showAfter = _ref.showAfter,
      showAlways = _ref.showAlways,
      duration = _ref.duration,
      easingPreset = _ref.easingPreset,
      props = _objectWithoutProperties(_ref, ["showAfter", "showAlways", "duration", "easingPreset"]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isScrolling = _useState2[0],
      setScrolling = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isShowButton = _useState4[0],
      setShowButton = _useState4[1];

  var containerRef = (0, _react.useRef)(null);
  var buttonRef = (0, _react.useRef)(null);
  var childrenContainer = children.filter(function (child) {
    return _typeof(child.type) === 'object';
  });
  var isTargetContainer = !!childrenContainer.length;
  var handleScroll = useThrottle(function (e) {
    var scrollTop = isTargetContainer ? e.target.scrollTop : window.pageYOffset;

    if (!isShowButton && scrollTop > showAfter) {
      setShowButton(true);
    } else if (isShowButton && scrollTop <= showAfter) {
      setShowButton(false);
      buttonRef.current.blur();
    }
  }, 100);

  var handleClick = function handleClick() {
    var scrollableDomEle = isTargetContainer ? containerRef.current : window;

    if (!isScrolling) {
      setScrolling(true);
      (0, _easyScroll["default"])({
        scrollableDomEle: scrollableDomEle,
        direction: 'top',
        duration: duration,
        easingPreset: easingPreset,
        onAnimationCompleteCallback: function onAnimationCompleteCallback() {
          setScrolling(false);
        }
      });
    }
  };

  (0, _react.useEffect)(function () {
    if (!isTargetContainer) {
      window.addEventListener('scroll', handleScroll);
    }

    return function cleanup() {
      if (!isTargetContainer) {
        window.removeEventListener('scroll', handleScroll);
      }
    };
  }, [isTargetContainer, handleScroll]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, rest, /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    d: isTargetContainer ? 'block' : 'none',
    onScroll: handleScroll,
    ref: containerRef
  }, override('Wrapper')), children), /*#__PURE__*/_react["default"].createElement(_widgets.Button, _extends({
    pos: isTargetContainer ? 'absolute' : 'fixed',
    v: isShowButton || showAlways ? 'visible' : 'hidden',
    onClick: handleClick,
    ref: buttonRef
  }, override('Button')), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, _extends({
    defaultIcon: _md.MdKeyboardArrowUp
  }, override('Icon')))));
};

var propInfo = {
  showAfter: {
    title: {
      en: 'Show button after (in px)',
      ru: 'Показать кнопку через (в px)'
    },
    control: 'text',
    category: 'Button',
    weight: 1
  },
  showAlways: {
    title: {
      en: 'Show button always',
      ru: 'Показывать кнопку всегда'
    },
    control: 'checkbox',
    category: 'Button',
    weight: 1
  },
  duration: {
    title: {
      en: 'Animation duration',
      ru: 'Продолжительность анимации'
    },
    control: 'text',
    category: 'Animation',
    weight: 1
  },
  easingPreset: {
    title: {
      en: 'Animation timing function',
      ru: 'Функция сглаживания анимации'
    },
    control: 'select',
    variants: ['linear', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeInQuint', 'easeOutQuint', 'easeInOutQuint'],
    category: 'Animation',
    weight: 1
  }
};
var defaultProps = {
  showAfter: 100,
  showAlways: false,
  duration: 1000,
  easingPreset: 'easeInOutQuad',
  'min-height': '0',
  position: 'relative'
};

var _default = Object.assign(ScrollToTop, {
  title: 'Scroll to Top',
  description: {
    en: 'Help users easily return to the top of the long page with a single click',
    ru: 'Помогите пользователям легко вернуться к началу страницы одним кликом мыши'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});

exports["default"] = _default;