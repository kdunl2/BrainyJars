"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _widgets = require("@quarkly/widgets");

var _fa = require("react-icons/fa");

var _components = require("@quarkly/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var social = [{
  icon: _fa.FaFacebook,
  propName: 'facebook',
  title: 'Facebook'
}, {
  icon: _fa.FaWhatsapp,
  propName: 'whatsapp',
  title: 'WhatsApp'
}, {
  icon: _fa.FaTumblr,
  propName: 'tumblr',
  title: 'Tumblr'
}, {
  icon: _fa.FaInstagram,
  propName: 'instagram',
  title: 'Instagram'
}, {
  icon: _fa.FaTwitter,
  propName: 'twitter',
  title: 'Twitter'
}, {
  icon: _fa.FaGooglePlus,
  propName: 'google-plus',
  title: 'Google+'
}, {
  icon: _fa.FaViber,
  propName: 'viber',
  title: 'Viber'
}, {
  icon: _fa.FaSnapchat,
  propName: 'snapchat',
  title: 'Snapchat'
}, {
  icon: _fa.FaVk,
  propName: 'vkontakte',
  title: 'VKontakte'
}, {
  icon: _fa.FaPinterest,
  propName: 'pinterest',
  title: 'Pinterest'
}, {
  icon: _fa.FaLinkedinIn,
  propName: 'linked-in',
  title: 'LinkedIn'
}, {
  icon: _fa.FaTelegram,
  propName: 'telegram',
  title: 'Telegram'
}, {
  icon: _fa.FaReddit,
  propName: 'reddit',
  title: 'Reddit'
}, {
  icon: _fa.FaYoutube,
  propName: 'youtube',
  title: 'YouTube'
}, {
  icon: _fa.FaFlickr,
  propName: 'flikr',
  title: 'Flickr'
}, {
  icon: _fa.FaFoursquare,
  propName: 'foursquare',
  title: 'Foursquare'
}, {
  icon: _fa.FaDiscord,
  propName: 'discord',
  title: 'Discord'
}, {
  icon: _fa.FaGithubAlt,
  propName: 'github',
  title: 'GitHub'
}];
var socialProps = social.reduce(function (acc, _ref) {
  var propName = _ref.propName;
  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, propName, true));
}, {});

var filterProps = function filterProps(props) {
  return Object.keys(props).reduce(function (result, propName) {
    if (!socialProps[propName]) {
      result[propName] = props[propName];
    }

    return result;
  }, {});
};

var defaultProps = {
  display: 'flex',
  'icon-size': '24px',
  'align-items': 'center',
  'justify-content': 'center'
};
var overrides = {
  icon: {
    props: {}
  },
  link: {
    kind: 'Link',
    props: {
      padding: '8px',
      margin: '0 4px',
      color: '--primary',
      background: '--color-lightD1',
      'hover-background': '--color-lightD2',
      'border-radius': '4px'
    }
  }
};

var SocialMedia = function SocialMedia(_ref2) {
  var size = _ref2['icon-size'],
      props = _objectWithoutProperties(_ref2, ["icon-size"]);

  var _useOverrides = (0, _components.useOverrides)(filterProps(props), overrides, defaultProps),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, rest, social.map(function (_ref3) {
    var propName = _ref3.propName,
        icon = _ref3.icon;
    if (!props[propName]) return null;
    return /*#__PURE__*/_react["default"].createElement(_widgets.Link, _extends({
      key: propName,
      href: props[propName],
      target: "_blank"
    }, override('link', "link-".concat(propName))), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, _extends({
      icon: icon,
      defaultIcon: icon,
      size: size
    }, override('icon', "icon-".concat(propName)))));
  }));
};

var propInfo = {
  'icon-size': {
    control: 'input',
    transformer: 'pixel',
    category: 'Main'
  }
};
social.forEach(function (_ref4) {
  var propName = _ref4.propName,
      title = _ref4.title;
  propInfo[propName] = {
    title: title,
    control: 'input',
    type: 'text',
    category: 'Social Links',
    weight: 1
  };
});
Object.assign(SocialMedia, {
  title: 'SocialMedia',
  description: {
    en: 'This component allows you to add links to your social media profiles or communities to your page',
    ru: 'Набор ссылок на ваши страницы профилей или группы в социальных сетях'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});
var _default = SocialMedia;
exports["default"] = _default;