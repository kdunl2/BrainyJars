"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _widgets = require("@quarkly/widgets");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DefaultHTML = function DefaultHTML(_ref) {
  var errorText = _ref.errorText;
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    display: "flex",
    "justify-content": "center",
    "align-items": "center",
    "flex-wrap": "wrap",
    width: "100%",
    "min-height": "100%",
    border: ".5px solid #ccc",
    margin: "0"
  }, /*#__PURE__*/_react["default"].createElement(_widgets.Image, {
    src: "https://w.soundcloud.com/icon/assets/images/orange_transparent_64-94fc761.png"
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    width: "100%",
    "text-align": "center"
  }, errorText));
};

var IframeBlock = _atomize["default"].iframe();

var Iframe = function Iframe(_ref2) {
  var trackId = _ref2.trackId,
      typeUrl = _ref2.typeUrl;
  return /*#__PURE__*/_react["default"].createElement(IframeBlock, {
    width: "100%",
    height: "100%",
    src: "https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/".concat(trackId).concat(typeUrl)
  });
};

var Wrapper = _atomize["default"].div();

var SoundCloud = function SoundCloud(_ref3) {
  var type = _ref3.type,
      url = _ref3.url,
      props = _objectWithoutProperties(_ref3, ["type", "url"]);

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      trackId = _useState2[0],
      setTrackId = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      typeUrl = _useState4[0],
      setTypeUrl = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = _slicedToArray(_useState5, 2),
      errorText = _useState6[0],
      setErrorText = _useState6[1];

  (0, _react.useEffect)(function () {
    if (typeof url !== 'undefined' && typeof fetch === 'function') {
      fetch("https://soundcloud.com/oembed?format=json&url=".concat(encodeURI(url), "&iframe=true")).then(function (response) {
        return response.json();
      }).then(function (data) {
        var trackIdTemp = data.html.match(/\d{7,}/g)[0];
        setTypeUrl(type === 'visual' ? '&visual=true' : '');
        setTrackId(trackIdTemp);
        setErrorText('');
      })["catch"](function () {
        setErrorText('Invalid URL');
      });
    }
  }, [url, type]);
  return /*#__PURE__*/_react["default"].createElement(Wrapper, _extends({
    display: "flex",
    "justify-content": "center",
    "align-items": "center"
  }, props), trackId !== '' && errorText === '' ? /*#__PURE__*/_react["default"].createElement(Iframe, {
    trackId: trackId,
    typeUrl: typeUrl
  }) : /*#__PURE__*/_react["default"].createElement(DefaultHTML, {
    errorText: errorText
  }));
};

var propInfo = {
  type: {
    title: {
      en: 'Player type',
      ru: 'Тип проигрывателя'
    },
    control: 'radio-group',
    variants: [{
      title: 'Standart',
      value: 'standart'
    }, {
      title: 'Visual',
      value: 'visual'
    }],
    category: 'Main',
    weight: 1
  },
  url: {
    title: {
      en: 'Link to the track',
      ru: 'Ссылка на трек'
    },
    control: 'input',
    type: 'text',
    category: 'Main',
    weight: 1
  }
};
var defaultProps = {
  type: 'standart'
};
Object.assign(SoundCloud, {
  title: 'SoundCloud',
  description: {
    en: 'This component allows you to add the SoundCloud audio player',
    ru: 'Компонент для добавления аудиопроигрыватель сервиса SoundCloud'
  },
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = SoundCloud;
exports["default"] = _default;