"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = useSignal;

var _react = require("react");

var isInViewport = function isInViewport(el) {
  if (!el) return false;
  var top = el.offsetTop;
  var left = el.offsetLeft;
  var width = el.offsetWidth;
  var height = el.offsetHeight;

  while (el.offsetParent) {
    el = el.offsetParent;
    top += el.offsetTop;
    left += el.offsetLeft;
  }

  return top < window.pageYOffset + window.innerHeight && left < window.pageXOffset + window.innerWidth && top + height > window.pageYOffset && left + width > window.pageXOffset;
};

function useViewport(cb, componentRef) {
  var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isCalled = (0, _react.useRef)(false);
  var checkInViewport = (0, _react.useCallback)(function () {
    if (!isCalled.current && isInViewport(componentRef.current)) {
      isCalled.current = true;
      cb();
      window.removeEventListener('scroll', checkInViewport);
    }
  }, [cb, componentRef]);
  (0, _react.useEffect)(function () {
    if (!active) return;
    checkInViewport();
    window.addEventListener('scroll', checkInViewport);
    return function () {
      return window.removeEventListener('scroll', checkInViewport);
    };
  }, [active, checkInViewport]);
}

function usePageLoad(cb) {
  var active = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var isCalled = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    if (!active || isCalled.current) return;

    if (document.readyState === 'complete') {
      isCalled.current = true;
      cb();
      return;
    }

    var callEventFunction = function callEventFunction() {
      isCalled.current = true;
      cb();
    };

    document.addEventListener('load', callEventFunction);
    return function () {
      return document.removeEventListener('load', callEventFunction);
    };
  }, [active, cb]);
}

function useSignal(signalType, cb, componentRef) {
  usePageLoad(cb, signalType === 'onPageLoad');
  useViewport(cb, componentRef, signalType === 'onViewport');
}