"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

var _utils = require("../utils");

var _hooks = require("./hooks");

var _props = require("./props");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Counter = function Counter(_ref) {
  var startTrigger = _ref.startTrigger,
      startProp = _ref.startProp,
      endProp = _ref.endProp,
      direction = _ref.direction,
      durationProp = _ref.durationProp,
      delayProp = _ref.delayProp,
      textAfter = _ref.textAfter,
      textBefore = _ref.textBefore,
      props = _objectWithoutProperties(_ref, ["startTrigger", "startProp", "endProp", "direction", "durationProp", "delayProp", "textAfter", "textBefore"]);

  var startNumb = (0, _react.useMemo)(function () {
    return parseInt(startProp, 10) || 0;
  }, [startProp]);
  var endNumb = (0, _react.useMemo)(function () {
    return parseInt(endProp, 10) || 0;
  }, [endProp]);
  var duration = (0, _react.useMemo)(function () {
    return (0, _utils.parseTime)(durationProp, _props.defaultProps.durationProp);
  }, [durationProp]);
  var delay = (0, _react.useMemo)(function () {
    return (0, _utils.parseTime)(delayProp, _props.defaultProps.delayProp);
  }, [delayProp]);
  var componentRef = (0, _react.useRef)(null);
  var counterRef = (0, _react.useRef)({
    currentStep: 0
  });

  var _useCounter = (0, _hooks.useCounter)(startNumb, endNumb, direction),
      _useCounter2 = _slicedToArray(_useCounter, 2),
      curNumb = _useCounter2[0],
      step = _useCounter2[1];

  var steps = (0, _react.useMemo)(function () {
    return Math.abs(endNumb - startNumb);
  }, [startNumb, endNumb]);
  var interval = (0, _react.useMemo)(function () {
    return Math.abs(duration / steps);
  }, [steps, duration]);
  var start = (0, _react.useCallback)(function (_ref2) {
    var current = _ref2.current;
    if (current.timeoutId || current.intervalId) return;
    current.timeoutId = setTimeout(function () {
      current.intervalId = setInterval(function () {
        if (current.currentStep <= steps) {
          current.currentStep += 1;
          step();
        } else {
          stop({
            current: current
          });
        }
      }, interval);
    }, delay);
  }, [steps, interval, delay, step, stop]);
  var stop = (0, _react.useCallback)(function (_ref3) {
    var current = _ref3.current;
    clearTimeout(current.timeoutId);
    clearInterval(current.intervalId);
    current.timeoutId = null;
    current.intervalId = null;
    current.currentStep = 0;
  }, []);
  (0, _hooks.useSignal)(startTrigger, function () {
    return start(counterRef);
  }, componentRef);
  (0, _react.useEffect)(function () {
    return function () {
      return stop(counterRef);
    };
  }, [stop]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    "text-align": "center",
    "font-size": "58px"
  }, props, {
    ref: componentRef
  }), "".concat(textBefore).concat(curNumb).concat(textAfter));
};

Object.assign(Counter, {
  title: 'Counter',
  description: {
    en: 'This component is a counter that increases or decreases to a certain value',
    ru: 'Компонент представляет из себя счетчик, который увеличивается или уменьшается до определенного значения'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});
var _default = Counter;
exports["default"] = _default;