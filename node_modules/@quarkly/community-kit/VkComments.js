"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useDeepCompareEffect = _interopRequireDefault(require("use-deep-compare-effect"));

var _reactVk = _interopRequireWildcard(require("react-vk"));

var _widgets = require("@quarkly/widgets");

var _ComponentNotice = _interopRequireDefault(require("./ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDebounce = function useDebounce(value, timeout, deep) {
  var _useState = (0, _react.useState)(value),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var comp = deep ? _useDeepCompareEffect["default"] : _react.useEffect;
  comp(function () {
    var handler = setTimeout(function () {
      return setState(value);
    }, timeout);
    return function () {
      return clearTimeout(handler);
    };
  }, [value, timeout]);
  return state;
};

var attachToString = function attachToString(x) {
  var keys = Object.keys(x);
  return keys.every(function (k) {
    return x[k];
  }) ? '*' : keys.filter(function (k) {
    return x[k];
  }).map(function (k) {
    return k.substring(6).toLowerCase();
  }).join();
};

var VKComments = function VKComments(_ref) {
  var apiId = _ref.apiId,
      pageId = _ref.pageId,
      elementId = _ref.elementId,
      width = _ref.width,
      height = _ref.height,
      limit = _ref.limit,
      realtime = _ref.realtime,
      autoPublish = _ref.autoPublish,
      pageUrl = _ref.pageUrl,
      attachGraffiti = _ref.attachGraffiti,
      attachPhoto = _ref.attachPhoto,
      attachAudio = _ref.attachAudio,
      attachLink = _ref.attachLink,
      attachVideo = _ref.attachVideo,
      props = _objectWithoutProperties(_ref, ["apiId", "pageId", "elementId", "width", "height", "limit", "realtime", "autoPublish", "pageUrl", "attachGraffiti", "attachPhoto", "attachAudio", "attachLink", "attachVideo"]);

  var dApiId = useDebounce(apiId, 1000);
  var dPageId = useDebounce(pageId, 1000);
  var dElementId = useDebounce(elementId, 1000);
  var attach = (0, _react.useMemo)(function () {
    return attachToString({
      attachGraffiti: attachGraffiti,
      attachPhoto: attachPhoto,
      attachAudio: attachAudio,
      attachLink: attachLink,
      attachVideo: attachVideo
    });
  }, [attachGraffiti, attachPhoto, attachAudio, attachLink, attachVideo]);
  var dOptions = useDebounce({
    width: width,
    height: height,
    limit: limit,
    attach: attach,
    autoPublish: autoPublish ? 1 : 0,
    norealtime: realtime ? 0 : 1,
    pageUrl: pageUrl
  }, 1000, true);
  var key = (0, _react.useMemo)(function () {
    return dApiId + JSON.stringify(dOptions) + dPageId + dElementId;
  }, [dApiId, dOptions, dPageId, dElementId]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, props, dApiId ? /*#__PURE__*/_react["default"].createElement(_reactVk["default"], {
    key: key,
    apiId: dApiId
  }, /*#__PURE__*/_react["default"].createElement(_reactVk.Comments, {
    elementId: dElementId,
    pageId: dPageId,
    options: dOptions
  })) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add your VK app ID in the Props panel"
  }));
};

var propInfo = {
  apiId: {
    title: {
      en: 'VK app ID',
      ru: 'ID приложения VK'
    },
    control: 'input',
    type: 'text',
    category: ' Main',
    weight: 1
  },
  pageId: {
    title: {
      en: 'VK page ID',
      ru: 'ID страницы VK'
    },
    control: 'input',
    type: 'text',
    category: ' Main',
    weight: 1
  },
  limit: {
    title: {
      en: 'Max. comments',
      ru: 'Макс. комментариев'
    },
    control: 'input',
    type: 'text',
    category: 'Advanced',
    weight: 0.5
  },
  autoPublish: {
    title: {
      en: 'Auto publishing',
      ru: 'Автопубликация'
    },
    control: 'checkbox',
    category: 'Advanced',
    weight: 0.5
  },
  realtime: {
    title: {
      en: 'Update in real time',
      ru: 'Обновлять в реальном времени'
    },
    control: 'checkbox',
    category: 'Advanced',
    weight: 0.5
  },
  pageUrl: {
    title: {
      en: 'Link to the page with the widget',
      ru: 'Ссылка на страницу с виджетом'
    },
    control: 'input',
    type: 'text',
    category: 'Advanced',
    weight: 0.5
  },
  attachGraffiti: {
    title: {
      en: 'Add graffiti',
      ru: 'Добавлять граффити'
    },
    control: 'checkbox',
    category: 'Attach',
    weight: 0.5
  },
  attachPhoto: {
    title: {
      en: 'Add photo',
      ru: 'Добавлять фотографии'
    },
    control: 'checkbox',
    category: 'Attach',
    weight: 0.5
  },
  attachAudio: {
    title: {
      en: 'Add audio',
      ru: 'Добавлять аудио'
    },
    control: 'checkbox',
    category: 'Attach',
    weight: 0.5
  },
  attachVideo: {
    title: {
      en: 'Add video',
      ru: 'Добавлять видео'
    },
    control: 'checkbox',
    category: 'Attach',
    weight: 0.5
  },
  attachLink: {
    title: {
      en: 'Add link',
      ru: 'Добавлять ссылки'
    },
    control: 'checkbox',
    category: 'Attach',
    weight: 0.5
  }
};
var defaultProps = {
  pageId: '',
  elementId: 'vk_comments',
  limit: 5,
  autoPublish: false,
  realtime: true,
  pageUrl: '',
  attachGraffiti: true,
  attachPhoto: true,
  attachAudio: true,
  attachVideo: true,
  attachLink: true
};
Object.assign(VKComments, {
  title: 'VK Comments',
  description: {
    en: 'This component shows a form with VK community comments',
    ru: 'Компонент показывает форму с комментариями сообщества VK'
  },
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = VKComments;
exports["default"] = _default;