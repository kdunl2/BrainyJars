"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _widgets = require("@quarkly/widgets");

var _components = require("@quarkly/components");

var _props = require("./props");

var _useFormField2 = _interopRequireDefault(require("../Form/hooks/useFormField"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Label = _atomize["default"].label();

var Input = _atomize["default"].input({
  effects: _props.effects
});

var CheckboxComponent = function CheckboxComponent(_ref) {
  var name = _ref.name,
      valueFromProps = _ref.value,
      defaultChecked = _ref.defaultChecked,
      autoFocus = _ref.autoFocus,
      required = _ref.required,
      disabled = _ref.disabled,
      checkedFromProps = _ref.checked,
      onChangeFromProps = _ref.onChange,
      props = _objectWithoutProperties(_ref, ["name", "value", "defaultChecked", "autoFocus", "required", "disabled", "checked", "onChange"]);

  var _useOverrides = (0, _components.useOverrides)(props, _props.overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var _useState = (0, _react.useState)(defaultChecked),
      _useState2 = _slicedToArray(_useState, 2),
      innerValue = _useState2[0],
      setInnerValue = _useState2[1];

  var _useFormField = (0, _useFormField2["default"])(name, {
    defaultValue: defaultChecked
  }),
      isInForm = _useFormField.isInForm,
      fieldProps = _useFormField.fieldProps;

  var isControlled = checkedFromProps !== undefined;
  var onInnerChange = (0, _react.useCallback)(function (e) {
    e.persist();
    setInnerValue(e.target.checked);
  }, []);

  var inputProps = function () {
    if (isControlled) {
      return {
        checked: checkedFromProps,
        onChange: onChangeFromProps
      };
    }

    if (isInForm) {
      return {
        checked: fieldProps.value,
        onChange: fieldProps.onChange
      };
    }

    return {
      checked: innerValue,
      onChange: onInnerChange
    };
  }();

  var value = (0, _utils.isString)(valueFromProps) && valueFromProps.length > 0 ? valueFromProps : undefined;
  var status = inputProps !== null && inputProps !== void 0 && inputProps.checked ? ':checked' : ':unchecked';
  return /*#__PURE__*/_react["default"].createElement(Label, _extends({
    padding: "6px",
    font: "--base",
    color: "--dark",
    "align-items": "center",
    display: "inline-flex"
  }, rest), /*#__PURE__*/_react["default"].createElement(Input, _extends({
    name: name,
    value: value,
    autoFocus: autoFocus,
    required: required,
    disabled: disabled
  }, inputProps, override('Input', "Input ".concat(status)), {
    type: "checkbox"
  })), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Text', "Text ".concat(status))));
};

Object.assign(CheckboxComponent, {
  title: 'Checkbox',
  description: {
    en: 'Checkbox element',
    ru: 'Элемент Checkbox'
  },
  effects: _props.effects,
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});
var _default = CheckboxComponent;
exports["default"] = _default;