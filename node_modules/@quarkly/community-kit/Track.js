"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _ComponentNotice = _interopRequireDefault(require("./ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Track = _atomize["default"].track();

var TrackComponent = function TrackComponent(_ref) {
  var container = _ref.container,
      src = _ref.src,
      srclang = _ref.srclang,
      kind = _ref.kind,
      label = _ref.label,
      isDefault = _ref.isDefault,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["container", "src", "srclang", "kind", "label", "isDefault", "children"]);

  return container ? /*#__PURE__*/_react["default"].createElement(Track, _extends({}, props, {
    "default": isDefault || undefined,
    src: src,
    srclang: srclang,
    kind: kind,
    label: label
  })) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], _extends({
    message: 'This component should be inside Audio or Video'
  }, props));
};

var propInfo = {
  src: {
    title: {
      en: 'File link',
      ru: 'Ссылка на файл'
    },
    control: 'input',
    type: 'text',
    category: 'Main',
    weight: 1
  },
  isDefault: {
    title: {
      en: 'Set default',
      ru: 'Использовать по умолчанию'
    },
    control: 'checkbox',
    category: 'Main',
    weight: 1
  },
  srclang: {
    title: {
      en: 'Track language',
      ru: 'Язык дорожки'
    },
    control: 'input',
    type: 'text',
    category: 'Main',
    weight: 1
  },
  kind: {
    title: {
      en: 'Track purpose',
      ru: 'Назначение дорожки'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Subtitles',
        ru: 'Субтитры'
      },
      value: 'subtitles'
    }, {
      title: {
        en: 'Captions',
        ru: 'Подписи'
      },
      value: 'captions'
    }, {
      title: {
        en: 'Descriptions',
        ru: 'Описания'
      },
      value: 'descriptions'
    }, {
      title: {
        en: 'Chapters',
        ru: 'Главы'
      },
      value: 'chapters'
    }, {
      title: {
        en: 'Metadata',
        ru: 'Метаданные'
      },
      value: 'metadata'
    }],
    category: 'Main',
    weight: 1
  },
  label: {
    title: {
      en: 'Displayed title',
      ru: 'Отображаемое название'
    },
    control: 'input',
    type: 'text',
    category: 'Main',
    weight: 1
  }
};
var defaultProps = {
  srclang: 'en',
  kind: 'subtitles'
};
Object.assign(TrackComponent, {
  title: 'Track',
  description: {
    en: 'This component allows you to add a synchronized text track',
    ru: 'Компонент для добавления синхронизированной текстовой дорожки'
  },
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = TrackComponent;
exports["default"] = _default;