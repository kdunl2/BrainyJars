"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _bs = require("react-icons/bs");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var overrides = {
  Line: {
    kind: 'Box',
    props: {
      top: '0px',
      width: '2px',
      'min-width': '0px',
      height: '100%',
      'background-color': '--color-dark',
      position: 'absolute',
      opacity: '.1'
    }
  },
  Item: {
    kind: 'Box',
    props: {
      'box-sizing': 'border-box',
      position: 'relative'
    }
  },
  Point: {
    kind: 'Icon',
    props: {
      category: 'bs',
      defaultIcon: _bs.BsDot,
      size: '40px',
      top: '-8px',
      width: '40px',
      height: '40px',
      color: '--color-dark',
      position: 'absolute'
    }
  },
  Dates: {
    kind: 'Text',
    props: {
      children: '18:00 - 20:30',
      margin: '0 0 8px',
      font: '--font-base',
      color: '--color-darkL1'
    }
  },
  Title: {
    kind: 'Text',
    props: {
      children: 'Desktop vs mobile',
      margin: '0 0 6px',
      font: '--font-headline3',
      color: '--color-dark'
    }
  },
  Descr: {
    kind: 'Text',
    props: {
      children: 'Fusce dapibus, tellus ac cursus commodo, tondor mauris condimentum fermentum.',
      margin: '0px',
      font: '--font-base',
      color: '--color-darkL2'
    }
  }
};
var getItemStyles = {
  fromLeft: function fromLeft(numb) {
    return {
      'padding-left': numb % 2 ? '30px' : '',
      'padding-right': numb % 2 ? '' : '30px',
      'padding-bottom': '15px',
      width: '50%',
      'align-self': numb % 2 ? 'flex-end' : 'flex-start',
      'text-align': numb % 2 ? 'left' : 'right'
    };
  },
  fromRight: function fromRight(numb) {
    return {
      'padding-left': numb % 2 ? '' : '30px',
      'padding-right': numb % 2 ? '30px' : '',
      'padding-bottom': '15px',
      width: '50%',
      'align-self': numb % 2 ? 'flex-start' : 'flex-end',
      'text-align': numb % 2 ? 'right' : 'left'
    };
  },
  toLeft: function toLeft() {
    return {
      'padding-left': '30px',
      'padding-right': '0px',
      'padding-bottom': '30px',
      width: '100%',
      'align-self': 'flex-start',
      'text-align': 'left'
    };
  },
  toRight: function toRight() {
    return {
      'padding-left': '0px',
      'padding-right': '30px',
      'padding-bottom': '30px',
      width: '100%',
      'align-self': 'flex-end',
      'text-align': 'right'
    };
  }
};
var getPointStyles = {
  fromLeft: function fromLeft(numb) {
    return {
      left: numb % 2 ? '-20px' : '',
      right: numb % 2 ? '' : '-20px'
    };
  },
  fromRight: function fromRight(numb) {
    return {
      left: numb % 2 ? '' : '-20px',
      right: numb % 2 ? '-20px' : ''
    };
  },
  toLeft: function toLeft() {
    return {
      left: '0',
      right: 'auto'
    };
  },
  toRight: function toRight() {
    return {
      left: 'auto',
      right: '0'
    };
  }
};
var getLineStyles = {
  fromLeft: function fromLeft() {
    return {
      left: '50%',
      right: 'auto',
      transform: 'translateX(-50%)'
    };
  },
  fromRight: function fromRight() {
    return {
      left: 'auto',
      right: '50%',
      transform: 'translateX(50%)'
    };
  },
  toLeft: function toLeft() {
    return {
      left: '2px',
      right: 'auto',
      transform: 'none'
    };
  },
  toRight: function toRight() {
    return {
      left: 'auto',
      right: '2px',
      transform: 'none'
    };
  }
};

var TimelineLine = function TimelineLine(_ref) {
  var alignDesktop = _ref.alignDesktop,
      alignMobile = _ref.alignMobile,
      breakpoint = _ref.breakpoint,
      override = _ref.override;
  var desktopLineStyles = (0, _react.useMemo)(function () {
    return getLineStyles[alignDesktop]();
  }, [alignDesktop]);
  var mobileLineStyles = (0, _react.useMemo)(function () {
    var _ref2;

    var styles = getLineStyles[alignMobile]();
    return _ref2 = {}, _defineProperty(_ref2, "".concat(breakpoint, "-left"), styles.left), _defineProperty(_ref2, "".concat(breakpoint, "-right"), styles.right), _defineProperty(_ref2, "".concat(breakpoint, "-transform"), styles.transform), _ref2;
  }, [alignMobile, breakpoint]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, desktopLineStyles, mobileLineStyles, override('Line')));
};

var TimelineItem = function TimelineItem(_ref3) {
  var numb = _ref3.numb,
      alignDesktop = _ref3.alignDesktop,
      alignMobile = _ref3.alignMobile,
      breakpoint = _ref3.breakpoint,
      override = _ref3.override;
  var desktopItemStyles = (0, _react.useMemo)(function () {
    return getItemStyles[alignDesktop](numb);
  }, [alignDesktop, numb]);
  var mobileItemStyles = (0, _react.useMemo)(function () {
    var _ref4;

    var styles = getItemStyles[alignMobile](numb);
    return _ref4 = {}, _defineProperty(_ref4, "".concat(breakpoint, "-padding-left"), styles['padding-left']), _defineProperty(_ref4, "".concat(breakpoint, "-padding-right"), styles['padding-right']), _defineProperty(_ref4, "".concat(breakpoint, "-padding-bottom"), styles['padding-bottom']), _defineProperty(_ref4, "".concat(breakpoint, "-width"), styles.width), _defineProperty(_ref4, "".concat(breakpoint, "-align-self"), styles['align-self']), _defineProperty(_ref4, "".concat(breakpoint, "-text-align"), styles['text-align']), _ref4;
  }, [alignMobile, breakpoint, numb]);
  var desktopPointStyles = (0, _react.useMemo)(function () {
    return getPointStyles[alignDesktop](numb);
  }, [alignDesktop, numb]);
  var mobilePointStyles = (0, _react.useMemo)(function () {
    var _ref5;

    var styles = getPointStyles[alignMobile](numb);
    return _ref5 = {}, _defineProperty(_ref5, "".concat(breakpoint, "-left"), styles.left), _defineProperty(_ref5, "".concat(breakpoint, "-right"), styles.right), _ref5;
  }, [alignMobile, breakpoint, numb]);
  var order = (0, _react.useMemo)(function () {
    return numb % 2 ? ':odd' : ':even';
  }, [numb]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, desktopItemStyles, mobileItemStyles, override('Item', "Item ".concat(order), "Item ".concat(numb))), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, _extends({}, desktopPointStyles, mobilePointStyles, override('Point', "Point ".concat(order), "Point ".concat(numb)))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Dates', "Dates ".concat(order), "Dates ".concat(numb))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Title', "Title ".concat(order), "Title ".concat(numb))), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Descr', "Descr ".concat(order), "Descr ".concat(numb))));
};

var Timeline = function Timeline(_ref6) {
  var itemsProp = _ref6.itemsProp,
      alignDesktop = _ref6.alignDesktop,
      alignMobile = _ref6.alignMobile,
      breakpoint = _ref6.breakpoint,
      props = _objectWithoutProperties(_ref6, ["itemsProp", "alignDesktop", "alignMobile", "breakpoint"]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var items = (0, _react.useMemo)(function () {
    return parseInt(itemsProp, 10) > 1 ? parseInt(itemsProp, 10) : 1;
  }, [itemsProp]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    width: "100%",
    "max-width": "100%",
    "flex-direction": "column",
    "box-sizing": "border-box",
    position: "relative",
    display: "flex",
    "overflow-x": "hidden",
    "overflow-y": "visible"
  }, rest), /*#__PURE__*/_react["default"].createElement(TimelineLine, {
    alignDesktop: alignDesktop,
    alignMobile: alignMobile,
    breakpoint: breakpoint,
    override: override
  }), Array(items).fill().map(function (_, numb) {
    return /*#__PURE__*/_react["default"].createElement(TimelineItem, {
      key: "item-".concat(numb) // eslint-disable-line
      ,
      numb: numb,
      alignDesktop: alignDesktop,
      alignMobile: alignMobile,
      breakpoint: breakpoint,
      override: override
    });
  }));
};

var propInfo = {
  itemsProp: {
    title: {
      en: 'Number of elements',
      ru: 'Количество элементов'
    },
    control: 'input',
    type: 'number',
    category: 'Main',
    weight: 1
  },
  alignDesktop: {
    title: {
      en: 'Alignment on desktop',
      ru: 'Выравнивание на десктопе'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'From left (staggered)',
        ru: 'Начиная с левой стороны'
      },
      value: 'fromLeft'
    }, {
      title: {
        en: 'From right (staggered)',
        ru: 'Начиная с правой стороны'
      },
      value: 'fromRight'
    }, {
      title: {
        en: 'Left',
        ru: 'По левой стороне'
      },
      value: 'toLeft'
    }, {
      title: {
        en: 'Right',
        ru: 'По правой стороне'
      },
      value: 'toRight'
    }],
    category: 'Main',
    weight: 1
  },
  alignMobile: {
    title: {
      en: 'Alignment on mobile',
      ru: 'Выравнивание на мобильных'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Left',
        ru: 'По левой стороне'
      },
      value: 'toLeft'
    }, {
      title: {
        en: 'Right',
        ru: 'По правой стороне'
      },
      value: 'toRight'
    }],
    category: 'Main',
    weight: 1
  },
  breakpoint: {
    title: {
      en: 'Mobile view start with breakpoint',
      ru: 'Мобильный вид начинается с breakpoint'
    },
    control: 'input',
    variants: ['sm', 'md', 'lg'],
    type: 'text',
    category: 'Main',
    weight: 1
  }
};
var defaultProps = {
  itemsProp: 4,
  alignDesktop: 'fromLeft',
  alignMobile: 'toLeft',
  breakpoint: 'sm'
};

var _default = Object.assign(Timeline, {
  title: 'Timeline',
  description: {
    en: 'Timeline is one of the best ways of showig an action sequence in a compact and understandable way',
    ru: 'Таймлайн — это один из лучших способов отображения хронологии в компактном и понятном виде'
  },
  overrides: overrides,
  propInfo: propInfo,
  defaultProps: defaultProps
});

exports["default"] = _default;