"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _dateFns = require("date-fns");

var _addMonths = _interopRequireDefault(require("date-fns/addMonths"));

var _DatePicker = require("../contexts/DatePicker");

var _SelectSingle = require("../contexts/SelectSingle");

var _SelectRange = require("../contexts/SelectRange");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var useDay = function useDay(_ref) {
  var date = _ref.date,
      colIdx = _ref.colIdx,
      rowIdx = _ref.rowIdx,
      monthNumber = _ref.monthNumber,
      buttonRef = _ref.ref;

  var _useDatePicker = (0, _DatePicker.useDatePicker)(),
      mode = _useDatePicker.mode,
      minDate = _useDatePicker.minDate,
      maxDate = _useDatePicker.maxDate,
      disabledDaysOfWeek = _useDatePicker.disabledDaysOfWeek,
      disabledDates = _useDatePicker.disabledDates,
      locale = _useDatePicker.locale,
      monthDate = _useDatePicker.monthDate,
      focused = _useDatePicker.focused,
      handleDayFocus = _useDatePicker.handleDayFocus,
      handleDayKeyDown = _useDatePicker.handleDayKeyDown,
      showOutsideDays = _useDatePicker.showOutsideDays;

  var single = (0, _SelectSingle.useSelectSingle)();
  var range = (0, _SelectRange.useSelectRange)();
  var isDisabled = (0, _react.useMemo)(function () {
    return (0, _utils.dateDisabled)(date, {
      mode: mode,
      minDate: minDate,
      maxDate: maxDate,
      disabledDaysOfWeek: disabledDaysOfWeek,
      disabledDates: disabledDates
    });
  }, [date, mode, minDate, maxDate, disabledDaysOfWeek, disabledDates]);
  var isSelected = (0, _react.useMemo)(function () {
    return (0, _utils.dateSelected)(date, {
      mode: mode,
      single: single,
      range: range
    });
  }, [date, mode, single, range]);
  var isFocused = (0, _dateFns.isSameDay)(focused, date);
  var isOutside = (0, _react.useMemo)(function () {
    return !(0, _dateFns.isSameMonth)(date, (0, _addMonths["default"])(monthDate, monthNumber));
  }, [date, monthDate, monthNumber]);
  var isShowed = !isOutside || showOutsideDays; // const isShowed = true;
  // if (isShowed) return { isShowed: true };
  // и дальше можно ничего не делать?

  var tabIndex = -1;

  if (focused) {
    tabIndex = isFocused ? 0 : -1;
  } else {
    tabIndex = (0, _dateFns.isFirstDayOfMonth)(date) ? 0 : 1;
  } // ============ BUTTON CALLBACKS =============


  var handleOptions = (0, _react.useMemo)(function () {
    return {
      isSelected: isSelected,
      isOutside: isOutside,
      isDisabled: isDisabled
    };
  }, [isDisabled, isOutside, isSelected]);
  var onClick = (0, _react.useCallback)(function () {
    if (mode === 'single') {
      single.handleDayClick(date, handleOptions);
    } else if (mode === 'range') {
      range.handleDayClick(date, handleOptions);
    }
  }, [mode, single, date, handleOptions, range]);
  var onMouseEnter = (0, _react.useCallback)(function () {
    if (mode === 'range') {
      range.handleDayHover(date);
    }
  }, [date, range, mode]);
  var onFocus = (0, _react.useCallback)(function () {
    handleDayFocus(date);
  }, [handleDayFocus, date]);
  var onKeyDown = (0, _react.useMemo)(function () {
    var throttled = (0, _utils.throttle)(function (e) {
      if (mode === 'range') {
        range.handleKeyDown(e);
      }

      handleDayKeyDown(e);
    }, 50);
    return function (e) {
      e.persist();
      throttled(e);
    };
  }, [mode, handleDayKeyDown, range]); // =========================

  (0, _react.useEffect)(function () {
    if (!focused) return;

    if ((0, _dateFns.isSameDay)(focused, date)) {
      var _buttonRef$current;

      (_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.focus();
    }
  }, [buttonRef, date, focused]);
  var buttonOverrides = (0, _react.useMemo)(function () {
    return (0, _utils.getButtonOverrides)({
      date: date,
      colIdx: colIdx,
      rowIdx: rowIdx,
      mode: mode,
      isDisabled: isDisabled,
      isOutside: isOutside,
      isSelected: isSelected,
      range: range
    });
  }, [date, colIdx, rowIdx, mode, isDisabled, isOutside, isSelected, range]);
  return (0, _react.useMemo)(function () {
    return {
      isShowed: isShowed,
      isDisabled: isDisabled,
      isFocused: isFocused,
      isOutside: isOutside,
      isSelected: isSelected,
      buttonOverrides: buttonOverrides,
      buttonProps: {
        tabIndex: tabIndex,
        'aria-pressed': isSelected,
        // Для достуспности с клавиатуы использую aria-disabled, а не disabled
        'aria-disabled': isDisabled,
        'aria-label': (0, _dateFns.format)(date, 'PPP', {
          locale: locale
        }),
        style: {
          // Почему-то pointer-events через atomize не работают
          pointerEvents: isDisabled ? 'none' : 'auto'
        },
        onClick: onClick,
        onFocus: onFocus,
        onKeyDown: onKeyDown,
        onMouseEnter: onMouseEnter
      }
    };
  }, [isShowed, isDisabled, isFocused, isOutside, isSelected, buttonOverrides, tabIndex, date, locale, onClick, onFocus, onKeyDown, onMouseEnter]);
};

var _default = useDay;
exports["default"] = _default;