"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _dateFns = require("date-fns");

var _DatePicker = require("../contexts/DatePicker");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var getYears = function getYears(_ref) {
  var minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      monthNumber = _ref.monthNumber;

  try {
    return (0, _dateFns.eachYearOfInterval)({
      start: minDate,
      end: (0, _dateFns.addMonths)(maxDate, monthNumber)
    }).map(function (d) {
      return d.getFullYear();
    });
  } catch (e) {
    return (0, _dateFns.eachYearOfInterval)({
      start: new Date(1900),
      end: (0, _dateFns.addMonths)(new Date(2100), monthNumber)
    }).map(function (d) {
      return d.getFullYear();
    });
  }
};

var useYearSelect = function useYearSelect(monthNumber) {
  var _useDatePicker = (0, _DatePicker.useDatePicker)(),
      locale = _useDatePicker.locale,
      monthDate = _useDatePicker.monthDate,
      setMonthDate = _useDatePicker.setMonthDate,
      minDate = _useDatePicker.minDate,
      maxDate = _useDatePicker.maxDate;

  var currentMonthDate = (0, _react.useMemo)(function () {
    return (0, _dateFns.addMonths)(monthDate, monthNumber);
  }, [monthDate, monthNumber]);
  var onChange = (0, _react.useCallback)(function (e) {
    var nextMonthDate = (0, _dateFns.addMonths)(new Date(e.target.value, currentMonthDate.getMonth()), -1 * monthNumber);
    setMonthDate(nextMonthDate);
  }, [currentMonthDate, monthNumber, setMonthDate]);
  var children = (0, _react.useMemo)(function () {
    return getYears({
      minDate: minDate,
      maxDate: maxDate,
      monthNumber: monthNumber,
      locale: locale
    }).map(function (x) {
      return /*#__PURE__*/_react["default"].createElement("option", {
        key: x
      }, x);
    });
  }, [minDate, maxDate, monthNumber, locale]);
  return {
    'aria-label': locale.labels.selectYearLabel,
    value: currentMonthDate.getFullYear(),
    onChange: onChange,
    children: children
  };
};

var _default = useYearSelect;
exports["default"] = _default;