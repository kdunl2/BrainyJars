"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _dateFns = require("date-fns");

var _DatePicker = require("../contexts/DatePicker");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getMonths = function getMonths(_ref) {
  var monthDate = _ref.monthDate,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      monthNumber = _ref.monthNumber,
      options = _objectWithoutProperties(_ref, ["monthDate", "minDate", "maxDate", "monthNumber"]);

  var monthDateWithOffset = (0, _dateFns.addMonths)(monthDate, monthNumber);
  var maxDateWithOffset = (0, _dateFns.addMonths)(maxDate, monthNumber);
  var year = monthDateWithOffset.getFullYear();
  var start = new Date(year, 0);
  var end = new Date(year, 11);

  if ((0, _dateFns.isValid)(minDate) && minDate.getFullYear() === year) {
    start = minDate;
  }

  if ((0, _dateFns.isValid)(maxDateWithOffset) && maxDateWithOffset.getFullYear() === year) {
    end = maxDateWithOffset;
  }

  try {
    return (0, _dateFns.eachMonthOfInterval)({
      start: start,
      end: end
    }).map(function (d) {
      return {
        idx: d.getMonth(),
        name: (0, _dateFns.format)(d, 'LLLL', options)
      };
    });
  } catch (e) {
    var firstMOY = new Date(year, 0);
    return _toConsumableArray(Array(12)).map(function (_, i) {
      return {
        idx: i,
        name: (0, _dateFns.format)((0, _dateFns.addMonths)(firstMOY, i), 'LLLL', options)
      };
    });
  }
};

var useMonthSelect = function useMonthSelect(monthNumber) {
  var _useDatePicker = (0, _DatePicker.useDatePicker)(),
      monthDate = _useDatePicker.monthDate,
      locale = _useDatePicker.locale,
      setMonthDate = _useDatePicker.setMonthDate,
      minDate = _useDatePicker.minDate,
      maxDate = _useDatePicker.maxDate;

  var currentMonthDate = (0, _react.useMemo)(function () {
    return (0, _dateFns.addMonths)(monthDate, monthNumber);
  }, [monthDate, monthNumber]);
  var onChange = (0, _react.useCallback)(function (e) {
    var nextMonthDate = (0, _dateFns.addMonths)(new Date(currentMonthDate.getFullYear(), e.target.value), -1 * monthNumber);
    setMonthDate(nextMonthDate);
  }, [currentMonthDate, setMonthDate, monthNumber]);
  var children = (0, _react.useMemo)(function () {
    return getMonths({
      minDate: minDate,
      maxDate: maxDate,
      monthDate: monthDate,
      monthNumber: monthNumber,
      locale: locale
    }).map(function (_ref2) {
      var name = _ref2.name,
          idx = _ref2.idx;
      return /*#__PURE__*/_react["default"].createElement("option", {
        key: idx,
        value: idx
      }, name);
    });
  }, [minDate, maxDate, monthDate, monthNumber, locale]);
  return {
    'aria-label': locale.labels.selectMonthLabel,
    value: currentMonthDate.getMonth(),
    onChange: onChange,
    children: children
  };
};

var _default = useMonthSelect;
exports["default"] = _default;