"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _dateFns = require("date-fns");

var _utils = require("../../utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DatePickerReducer = function DatePickerReducer(state, action) {
  switch (action.type) {
    case 'SET_MONTH_DATE':
      {
        var minDate = state.minDate,
            maxDate = state.maxDate;
        var monthDate = action.payload;
        if ((0, _utils.isBeforeMY)(monthDate, minDate)) return _objectSpread(_objectSpread({}, state), {}, {
          monthDate: minDate,
          focused: null
        });
        if ((0, _utils.isAfterMY)(monthDate, maxDate)) return _objectSpread(_objectSpread({}, state), {}, {
          monthDate: maxDate,
          focused: null
        });
        return _objectSpread(_objectSpread({}, state), {}, {
          monthDate: monthDate,
          focused: null
        });
      }

    case 'SET_FOCUS':
      return _objectSpread(_objectSpread({}, state), {}, {
        focused: action.payload
      });

    case 'MODIFY_FOCUS':
      {
        var focused = state.focused,
            numberOfMonths = state.numberOfMonths,
            _monthDate = state.monthDate,
            _minDate = state.minDate,
            _maxDate = state.maxDate;
        if (!focused) return state;
        var modifier = action.payload;
        var nextFocused = modifier(focused);
        var nextMonthDate = _monthDate;
        if ((0, _utils.isBeforeMY)(nextFocused, _minDate) || (0, _utils.isAfterMY)(nextFocused, (0, _dateFns.addMonths)(_maxDate, numberOfMonths - 1))) return state;

        if ((0, _utils.isBeforeMY)(nextFocused, _monthDate)) {
          nextMonthDate = (0, _dateFns.addMonths)(nextFocused, -1 * (numberOfMonths - 1));
        }

        if ((0, _utils.isAfterMY)(nextFocused, (0, _dateFns.addMonths)(_monthDate, numberOfMonths - 1))) {
          nextMonthDate = nextFocused;
        }

        return _objectSpread(_objectSpread({}, state), {}, {
          focused: nextFocused,
          monthDate: nextMonthDate
        });
      }

    case 'MODIFY_MONTH':
      {
        var _monthDate2 = state.monthDate,
            _minDate2 = state.minDate,
            _maxDate2 = state.maxDate,
            _numberOfMonths = state.numberOfMonths;
        var number = action.payload === 'NEXT' ? 1 : -1;

        var _nextMonthDate = (0, _dateFns.addMonths)(_monthDate2, number * _numberOfMonths);

        if ((0, _utils.isBeforeMY)(_nextMonthDate, _minDate2)) return _objectSpread(_objectSpread({}, state), {}, {
          monthDate: _minDate2,
          focused: null
        });
        if ((0, _utils.isAfterMY)(_nextMonthDate, _maxDate2)) return _objectSpread(_objectSpread({}, state), {}, {
          monthDate: _maxDate2,
          focused: null
        });
        return _objectSpread(_objectSpread({}, state), {}, {
          monthDate: _nextMonthDate,
          focused: null
        });
      }

    case 'STATE_UPDATE':
      return _objectSpread(_objectSpread({}, state), action.payload);

    default:
      throw new Error();
  }
};

var _default = DatePickerReducer;
exports["default"] = _default;