"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _dateFns = require("date-fns");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var dateFormats = [['dd.MM.yyyy', /^(0?[1-9]|[12][0-9]|3[01])[.](0?[1-9]|1[012])[.]\d{4}$/], ['dd-MM-yyyy', /^(0?[1-9]|[12][0-9]|3[01])[-](0?[1-9]|1[012])[-]\d{4}$/], ['dd/MM/yyyy', /^(0?[1-9]|[12][0-9]|3[01])[/](0?[1-9]|1[012])[/]\d{4}$/], ['yyyy-MM-dd', /^\d{4}[-](0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])$/]];
var monthDateFormats = [['MM.yyyy', /^(0?[1-9]|1[012])[.]\d{4}$/], ['MM-yyyy', /^(0?[1-9]|1[012])[-]\d{4}$/], ['MM/yyyy', /^(0?[1-9]|1[012])[/]\d{4}$/], ['yyyy.MM', /^\d{4}[.](0?[1-9]|1[012])$/], ['yyyy-MM', /^\d{4}[-](0?[1-9]|1[012])$/], ['yyyy/MM', /^\d{4}[/](0?[1-9]|1[012])$/]];

var dateParse = function dateParse(dateString) {
  var _formats$find;

  var onlyMonth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var formats = onlyMonth ? monthDateFormats : dateFormats;

  var _ref = (_formats$find = formats.find(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        regex = _ref4[1];

    return regex.test(dateString);
  })) !== null && _formats$find !== void 0 ? _formats$find : [],
      _ref2 = _slicedToArray(_ref, 1),
      formatString = _ref2[0];

  if (formatString) {
    var result = (0, _dateFns.parse)(dateString, formatString, new Date());

    if ((0, _dateFns.isValid)(result)) {
      return result;
    }
  }

  return undefined;
};

var _default = dateParse;
exports["default"] = _default;