"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _dateFns = require("date-fns");

var _getCellOverrides = _interopRequireDefault(require("./getCellOverrides"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var buttonModifiers = function buttonModifiers(_ref) {
  var date = _ref.date,
      mode = _ref.mode,
      isDisabled = _ref.isDisabled,
      isOutside = _ref.isOutside,
      isSelected = _ref.isSelected,
      range = _ref.range;
  var overrides = [];

  if (isDisabled) {
    overrides.push('DateButton Disabled');
    return overrides;
  }

  if (isOutside) {
    overrides.push('DateButton Outside');
  }

  if (mode === 'single') {
    if (isSelected) {
      overrides.push('DateButton Selected');
    }

    return overrides;
  }

  if (mode === 'range') {
    var _range$selected = _slicedToArray(range.selected, 2),
        fromSelected = _range$selected[0],
        toSelected = _range$selected[1];

    var from;
    var to;
    var isToHovered = false;
    var isFromHovered = false;
    /**
     * Обработка ховера
     * Если конец диапазона не выбран, то ориентируемся на ховер
     */

    if (toSelected) {
      from = fromSelected;
      to = toSelected;
    } else if ((0, _dateFns.isAfter)(range.hovered, fromSelected) || (0, _dateFns.isSameDay)(range.hovered, fromSelected)) {
      from = fromSelected;
      to = range.hovered;
      isToHovered = true;
    } else if ((0, _dateFns.isBefore)(range.hovered, fromSelected)) {
      from = range.hovered;
      to = fromSelected;
      isFromHovered = true;
    } else {
      // Для обработки клавиатуры (когда нет даты с ховером)
      from = fromSelected;
      to = null;
    }

    var isFrom = (0, _dateFns.isSameDay)(date, from);
    var isTo = (0, _dateFns.isSameDay)(date, to);
    var isInRange = (0, _dateFns.isAfter)(date, from) && (0, _dateFns.isBefore)(date, to);
    var isSingleRange = isFrom && isTo;

    if (isInRange || isFrom || isTo) {
      overrides.push('DateButton Range');
      if (isInRange) return overrides;
    }

    if (isSingleRange) {
      overrides.push.apply(overrides, ['DateButton OneDay Range'].concat(_toConsumableArray(isToHovered ? ['DateButton OneDay Range Hovered'] : [])));
      return overrides;
    }

    if (isFrom || isTo) {
      var endType = isFrom ? 'From' : 'To';
      var isHovered = isFrom ? isFromHovered : isToHovered;
      overrides.push.apply(overrides, ['DateButton End Range', "DateButton ".concat(endType, " Range")].concat(_toConsumableArray(isHovered ? ['DateButton End Range Hovered', "DateButton ".concat(endType, " Range Hovered")] : [])));
    }

    return overrides;
  }
};

var getButtonOverrides = function getButtonOverrides(_ref2) {
  var date = _ref2.date,
      colIdx = _ref2.colIdx,
      rowIdx = _ref2.rowIdx,
      mode = _ref2.mode,
      isDisabled = _ref2.isDisabled,
      isOutside = _ref2.isOutside,
      isSelected = _ref2.isSelected,
      range = _ref2.range;
  var cell = {
    colIdx: colIdx,
    rowIdx: rowIdx
  };
  var overrides = [].concat(_toConsumableArray((0, _getCellOverrides["default"])('DateButton', cell)), _toConsumableArray(buttonModifiers({
    date: date,
    mode: mode,
    isDisabled: isDisabled,
    isOutside: isOutside,
    isSelected: isSelected,
    range: range
  })), ["DateButton ".concat(rowIdx * 10 + colIdx + 1)]);
  return overrides;
};

var _default = getButtonOverrides;
exports["default"] = _default;