"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _dateFns = require("date-fns");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useInput = function useInput(_ref) {
  var formatString = _ref.formatString,
      updateValue = _ref.updateValue;
  var ref = (0, _react.useRef)();

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  (0, _react.useEffect)(function () {
    var date = (0, _dateFns.parse)(inputValue, formatString, new Date());
    setInputValue((0, _dateFns.isValid)(date) ? (0, _dateFns.format)(date, formatString) : '');
  }, [formatString, inputValue]);
  var onBlur = (0, _react.useCallback)(function () {
    if (inputValue === '') return;
    var date = (0, _dateFns.parse)(inputValue, formatString, new Date());

    if (!(0, _dateFns.isValid)(date)) {
      setInputValue('Invalid date');
    }
  }, [formatString, inputValue]);
  var onChange = (0, _react.useCallback)(function (e) {
    setInputValue(e.target.value);
    var date = (0, _dateFns.parse)(e.target.value, formatString, new Date());
    updateValue(date);
  }, [formatString, updateValue]);
  return (0, _react.useMemo)(function () {
    return {
      setInputValue: setInputValue,
      props: {
        ref: ref,
        value: inputValue,
        onBlur: onBlur,
        onChange: onChange
      }
    };
  }, [inputValue, onBlur, onChange]);
};

var _default = useInput;
exports["default"] = _default;