"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

var _reactGoogleRecaptcha = _interopRequireDefault(require("react-google-recaptcha"));

var _ComponentNotice = _interopRequireDefault(require("../ComponentNotice"));

var _props = require("./props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ReCaptcha = function ReCaptcha(_ref) {
  var sitekey = _ref.sitekey,
      onChange = _ref.onChange,
      theme = _ref.theme,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, ["sitekey", "onChange", "theme", "size"]);

  var key = (0, _react.useMemo)(function () {
    return Object.values({
      sitekey: sitekey,
      theme: theme,
      size: size
    }).join();
  }, [sitekey, theme, size]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    display: "inline-block"
  }, props), sitekey ? /*#__PURE__*/_react["default"].createElement(_reactGoogleRecaptcha["default"], {
    key: key,
    sitekey: sitekey,
    onChange: onChange,
    theme: theme,
    size: size
  }) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add your API key in the Props panel"
  }));
};

var _default = Object.assign(ReCaptcha, {
  title: 'reCAPTCHA V2',
  description: {
    en: 'reCAPTCHA is a free service that protects your site from spam and abuse',
    ru: 'reCAPTCHA - это бесплатный сервис, защищающий ваш сайт от спама'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});

exports["default"] = _default;