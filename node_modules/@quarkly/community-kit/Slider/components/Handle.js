"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Input = _atomize["default"].input();

var FORWARD_KEYS = ['ArrowRight', 'ArrowUp'];
var BACKWARD_KEYS = ['ArrowLeft', 'ArrowDown'];

var Handle = /*#__PURE__*/_react["default"].forwardRef(function (_ref, ref) {
  var name = _ref.name,
      value = _ref.value,
      onChange = _ref.onChange,
      min = _ref.min,
      max = _ref.max,
      vertical = _ref.vertical,
      tickSizeRatio = _ref.tickSizeRatio,
      stepSize = _ref.stepSize,
      labelPrecision = _ref.labelPrecision,
      labelRenderer = _ref.labelRenderer,
      override = _ref.override,
      updated = _ref.updated,
      valuePrecision = _ref.valuePrecision,
      props = _objectWithoutProperties(_ref, ["name", "value", "onChange", "min", "max", "vertical", "tickSizeRatio", "stepSize", "labelPrecision", "labelRenderer", "override", "updated", "valuePrecision"]);

  var mainStyle = (0, _react.useMemo)(function () {
    if (!updated || !ref.current) return {};
    var rect = ref.current.getBoundingClientRect();
    var offsetRatio = (value - min) * tickSizeRatio;
    var side = vertical ? 'top' : 'left';
    var offset = (0, _utils.formatPercentage)(vertical ? 1 - offsetRatio : offsetRatio);
    var handleOffset = vertical ? rect.height / 2 : rect.width / 2;
    return _objectSpread({
      style: _defineProperty({}, side, "calc(".concat(offset, " - ").concat(handleOffset, "px)"))
    }, vertical ? {
      left: '50%',
      transform: 'translateX(-50%);'
    } : {
      top: '50%',
      transform: 'translateY(-50%);'
    });
  }, [min, ref, updated, tickSizeRatio, value, vertical]);
  var handleLabelStyles = (0, _react.useMemo)(function () {
    return vertical ? {
      top: '50%',
      transform: 'translate(20px, -50%)'
    } : {
      left: '50%',
      transform: 'translate(-50%, 2px)'
    };
  }, [vertical]);

  var handleKeyDown = function handleKeyDown(event) {
    if (FORWARD_KEYS.includes(event.key)) {
      onChange((0, _utils.clamp)((0, _utils.roundValue)(value + stepSize, valuePrecision), min, max));
    } else if (BACKWARD_KEYS.includes(event.key)) {
      onChange((0, _utils.clamp)((0, _utils.roundValue)(value - stepSize, valuePrecision), min, max));
    }
  };

  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    tabIndex: 0,
    role: "slider",
    ref: ref,
    onKeyDown: handleKeyDown
  }, mainStyle, override('Slider Handle'), props), /*#__PURE__*/_react["default"].createElement(Input, {
    width: "0",
    height: "0",
    overflow: "hidden",
    appearance: "none",
    readOnly: true,
    type: "range",
    name: name,
    "aria-orientation": vertical ? 'vertical' : 'horizontal',
    "aria-valuemin": min,
    "aria-valuemax": max,
    "aria-valuenow": value,
    value: value
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, handleLabelStyles, override('Handle Label')), (0, _utils.formatLabel)(value, {
    labelPrecision: labelPrecision,
    stepSize: stepSize,
    labelRenderer: labelRenderer,
    isHandleTooltip: true
  })));
});

Handle.displayName = 'Handle';
var _default = Handle;
exports["default"] = _default;