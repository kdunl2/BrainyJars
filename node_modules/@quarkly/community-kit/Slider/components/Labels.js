"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Labels = function Labels(_ref) {
  var vertical = _ref.vertical,
      min = _ref.min,
      max = _ref.max,
      labelValues = _ref.labelValues,
      labelStepSize = _ref.labelStepSize,
      labelPrecision = _ref.labelPrecision,
      labelRenderer = _ref.labelRenderer,
      stepSize = _ref.stepSize,
      override = _ref.override;
  var labels = (0, _react.useMemo)(function () {
    var getLabelStyle = function getLabelStyle(step) {
      var offset = (step - min) / (max - min);
      var side = vertical ? 'bottom' : 'left';
      return {
        style: _defineProperty({}, side, (0, _utils.formatPercentage)(offset))
      };
    };

    var values = [];

    if (typeof labelValues !== 'undefined') {
      values = labelValues.filter(function (x) {
        return x >= min && x <= max;
      });
    } else {
      for (var i = min; i < max || (0, _utils.approxEqual)(i, max); i += labelStepSize) {
        values.push(i);
      }
    }

    return values.map(function (value) {
      return {
        step: value,
        props: getLabelStyle(value)
      };
    });
  }, [labelStepSize, labelValues, max, min, vertical]);
  var memoLabels = (0, _react.useMemo)(function () {
    return labels.map(function (_ref2) {
      var step = _ref2.step,
          props = _ref2.props;
      var overrideKey = "Label ".concat("".concat(step).replace('.', ','));
      return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
        key: step
      }, props, vertical ? {
        transform: 'translateY(50%)'
      } : {
        transform: 'translateX(-50%)'
      }, override('Label', overrideKey, {
        defaultKey: overrideKey
      })), (0, _utils.formatLabel)(step, {
        labelPrecision: labelPrecision,
        stepSize: stepSize,
        labelRenderer: labelRenderer,
        isHandleTooltip: false
      }));
    });
  }, [labels, labelPrecision, labelRenderer, override, stepSize, vertical]);
  var labelsStyles = (0, _react.useMemo)(function () {
    return {
      margin: vertical ? '0 10px' : '10px 0'
    };
  }, [vertical]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, labelsStyles, override('Labels')), memoLabels);
};

var _default = Labels;
exports["default"] = _default;