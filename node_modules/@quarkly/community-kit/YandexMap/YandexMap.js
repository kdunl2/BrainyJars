"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _resizeObserver = _interopRequireDefault(require("@react-hook/resize-observer"));

var _widgets = require("@quarkly/widgets");

var _reactYandexMaps = require("react-yandex-maps");

var _utils = require("../utils");

var _props = require("./props");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var YandexMap = function YandexMap(_ref) {
  var apikey = _ref.apikey,
      zoomValue = _ref.zoomValue,
      zoomControl = _ref.zoomControl,
      latitudeCenter = _ref.latitudeCenter,
      longitudeCenter = _ref.longitudeCenter,
      trafficControl = _ref.trafficControl,
      rulerControl = _ref.rulerControl,
      typeSelectorContol = _ref.typeSelectorContol,
      searchControl = _ref.searchControl,
      geolocationControl = _ref.geolocationControl,
      fullscreenControl = _ref.fullscreenControl,
      props = _objectWithoutProperties(_ref, ["apikey", "zoomValue", "zoomControl", "latitudeCenter", "longitudeCenter", "trafficControl", "rulerControl", "typeSelectorContol", "searchControl", "geolocationControl", "fullscreenControl"]);

  var ymapRef = (0, _react.useRef)({});
  var containerRef = (0, _react.useRef)(null);
  var dapiKey = (0, _utils.useDebounce)(apikey, 2000);
  var key = (0, _utils.useDebounce)("yandexmap".concat(zoomValue).concat(latitudeCenter).concat(longitudeCenter), 2000);
  (0, _resizeObserver["default"])(containerRef, function () {
    var _ymapRef$current, _ymapRef$current$cont;

    return (_ymapRef$current = ymapRef.current) === null || _ymapRef$current === void 0 ? void 0 : (_ymapRef$current$cont = _ymapRef$current.container) === null || _ymapRef$current$cont === void 0 ? void 0 : _ymapRef$current$cont.fitToViewport();
  });
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    ref: containerRef,
    height: "250px",
    display: "block"
  }, props), /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.YMaps, {
    key: dapiKey,
    query: {
      apikey: dapiKey
    }
  }, /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.Map, {
    key: key,
    height: "100%",
    width: "100%",
    defaultState: {
      center: [parseFloat(latitudeCenter), parseFloat(longitudeCenter)],
      zoom: parseInt(zoomValue, 10)
    },
    options: {
      autoFitToViewport: 'allways'
    },
    defaultOptions: {
      autoFitToViewport: 'allways'
    },
    instanceRef: ymapRef
  }, fullscreenControl && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.FullscreenControl, null), geolocationControl && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.GeolocationControl, null), zoomControl && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.ZoomControl, null), trafficControl && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.TrafficControl, null), rulerControl && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.RulerControl, null), typeSelectorContol && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.TypeSelector, null), searchControl && /*#__PURE__*/_react["default"].createElement(_reactYandexMaps.SearchControl, {
    options: {
      provider: 'yandex#search'
    }
  }))));
};

Object.assign(YandexMap, {
  title: 'Yandex Map',
  description: {
    en: "This component is for adding maps from 'Yandex.Maps'",
    ru: 'Компонент для добавления карты сервиса "Яндекс.Карты"'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});
var _default = YandexMap;
exports["default"] = _default;