"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _widgets = require("@quarkly/widgets");

var _resizeObserver = _interopRequireDefault(require("@react-hook/resize-observer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useSize = function useSize(target) {
  var _useState = (0, _react.useState)({
    width: 1,
    height: 1
  }),
      _useState2 = _slicedToArray(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  (0, _react.useLayoutEffect)(function () {
    if (!target.current) return;
    setSize(target.current.getBoundingClientRect());
  }, [target.current]); // eslint-disable-line

  (0, _resizeObserver["default"])(target, function (entry) {
    return setSize(entry.contentRect);
  });
  return size;
};

var SVG = _atomize["default"].svg();

var shapes = {
  square: /*#__PURE__*/(0, _react.forwardRef)(function square(_ref, ref) {
    var offset = _ref.offset,
        size = _ref.size,
        props = _objectWithoutProperties(_ref, ["offset", "size"]);

    var side = Math.min(size.width, size.height);
    return /*#__PURE__*/_react["default"].createElement("rect", _extends({
      ref: ref,
      x: (size.width - side + offset) / 2,
      y: (size.height - side + offset) / 2,
      width: side - offset,
      height: side - offset
    }, props));
  }),
  line: /*#__PURE__*/(0, _react.forwardRef)(function line(_ref2, ref) {
    var offset = _ref2.offset,
        size = _ref2.size,
        props = _objectWithoutProperties(_ref2, ["offset", "size"]);

    if (props.strokeLinecap === 'butt') {
      offset = 0;
    }

    return /*#__PURE__*/_react["default"].createElement("line", _extends({
      ref: ref,
      x1: offset / 2,
      y1: size.height / 2,
      x2: size.width - offset / 2,
      y2: size.height / 2
    }, props));
  }),
  rectangle: /*#__PURE__*/(0, _react.forwardRef)(function rectangle(_ref3, ref) {
    var offset = _ref3.offset,
        size = _ref3.size,
        props = _objectWithoutProperties(_ref3, ["offset", "size"]);

    return /*#__PURE__*/_react["default"].createElement("rect", _extends({
      ref: ref,
      x: offset / 2,
      y: offset / 2,
      width: size.width - offset,
      height: size.height - offset
    }, props));
  }),
  ellipse: /*#__PURE__*/(0, _react.forwardRef)(function ellipse(_ref4, ref) {
    var offset = _ref4.offset,
        size = _ref4.size,
        props = _objectWithoutProperties(_ref4, ["offset", "size"]);

    return /*#__PURE__*/_react["default"].createElement("ellipse", _extends({
      ref: ref,
      cx: size.width / 2,
      cy: size.height / 2,
      rx: (size.width - offset) / 2,
      ry: (size.height - offset) / 2
    }, props));
  }),
  circle: /*#__PURE__*/(0, _react.forwardRef)(function circle(_ref5, ref) {
    var offset = _ref5.offset,
        size = _ref5.size,
        props = _objectWithoutProperties(_ref5, ["offset", "size"]);

    var diameter = Math.min(size.width, size.height);
    return /*#__PURE__*/_react["default"].createElement("circle", _extends({
      ref: ref,
      cx: size.width / 2,
      cy: size.height / 2,
      r: (diameter - offset) / 2
    }, props));
  })
};

var getOffset = function getOffset(_ref6) {
  var computedWidth = _ref6.computedWidth,
      size = _ref6.size;
  var width = parseFloat(computedWidth);

  if (!computedWidth.endsWith('%')) {
    return width;
  } // https://oreillymedia.github.io/Using_SVG/extras/ch05-percentages.html#resize-eye-figure


  var diagonal = Math.hypot(size.width, size.height) / Math.SQRT2;
  return diagonal * width / 100;
};

var SVGShape = function SVGShape(_ref7) {
  var type = _ref7.type,
      stroke = _ref7.stroke,
      strokeWidth = _ref7.strokeWidth,
      strokeOpacity = _ref7.strokeOpacity,
      strokeLinecap = _ref7.strokeLinecap,
      strokeDasharray = _ref7.strokeDasharray,
      fill = _ref7.fill,
      fillOpacity = _ref7.fillOpacity,
      props = _objectWithoutProperties(_ref7, ["type", "stroke", "strokeWidth", "strokeOpacity", "strokeLinecap", "strokeDasharray", "fill", "fillOpacity"]);

  var shapeRef = (0, _react.useRef)(null);
  var mainRef = (0, _react.useRef)(null);
  var size = useSize(mainRef);

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      offset = _useState4[0],
      setOffset = _useState4[1];

  var Shape = shapes[type.toLowerCase()];
  var shapeProps = {
    stroke: stroke,
    strokeWidth: strokeWidth,
    strokeOpacity: strokeOpacity,
    strokeLinecap: strokeLinecap,
    strokeDasharray: strokeDasharray,
    fill: fill,
    fillOpacity: fillOpacity
  };
  (0, _react.useEffect)(function () {
    if (!shapeRef.current) return;
    var computedWidth = getComputedStyle(shapeRef.current).strokeWidth;
    var newOffset = getOffset({
      computedWidth: computedWidth,
      size: size
    });
    setOffset(newOffset);
  }, [strokeWidth, type, size]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    position: "relative",
    height: "200px",
    width: "100%",
    ref: mainRef
  }, props), /*#__PURE__*/_react["default"].createElement(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 ".concat(size.width, " ").concat(size.height),
    position: "absolute",
    top: "0",
    left: "0",
    width: size.width,
    height: size.height
  }, /*#__PURE__*/_react["default"].createElement(Shape, _extends({
    ref: shapeRef,
    offset: offset,
    size: size
  }, shapeProps))));
};

var propInfo = {
  type: {
    title: {
      en: 'Shape type',
      ru: 'Тип формы'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Line',
        ru: 'Линия'
      },
      value: 'line'
    }, {
      title: {
        en: 'Ellipse',
        ru: 'Овал'
      },
      value: 'ellipse'
    }, {
      title: {
        en: 'Circle',
        ru: 'Круг'
      },
      value: 'circle'
    }, {
      title: {
        en: 'Rectangle',
        ru: 'Прямоугольник'
      },
      value: 'rectangle'
    }, {
      title: {
        en: 'Square',
        ru: 'Квадрат'
      },
      value: 'square'
    }],
    category: 'Main',
    weight: 1
  },
  stroke: {
    title: {
      en: 'Stroke color',
      ru: 'Цвет обводки'
    },
    control: 'color',
    category: 'SVG Styles',
    weight: 0.5
  },
  strokeWidth: {
    title: {
      en: 'Stroke thickness',
      ru: 'Толщина обводки'
    },
    control: 'input',
    type: 'text',
    category: 'SVG Styles',
    weight: 0.5
  },
  strokeOpacity: {
    title: {
      en: 'Stroke opacity',
      ru: 'Прозрачность обводки'
    },
    control: 'input',
    type: 'text',
    category: 'SVG Styles',
    weight: 0.5
  },
  strokeLinecap: {
    title: {
      en: 'Stroke shape',
      ru: 'Форма обводки'
    },
    control: 'select',
    variants: ['butt', 'round', 'square'],
    category: 'SVG Styles',
    weight: 0.5
  },
  strokeDasharray: {
    title: {
      en: 'Dashed stroke',
      ru: 'Пунктирная обводка'
    },
    control: 'input',
    type: 'text',
    category: 'SVG Styles',
    weight: 0.5
  },
  fill: {
    title: {
      en: 'Shape color',
      ru: 'Цвет фигуры'
    },
    control: 'color',
    category: 'SVG Styles',
    weight: 0.5
  },
  fillOpacity: {
    title: {
      en: 'Shape opacity',
      ru: 'Прозрачность фигуры'
    },
    control: 'input',
    type: 'text',
    category: 'SVG Styles',
    weight: 0.5
  }
};
var defaultProps = {
  type: 'circle',
  stroke: '#000000',
  strokeWidth: '8',
  strokeOpacity: '1',
  strokeLinecap: 'round',
  strokeDasharray: '30',
  fill: '--color-primary',
  fillOpacity: '1'
};
Object.assign(SVGShape, {
  title: 'SVG Shape',
  description: {
    en: 'This component helps you create simple SVG shapes',
    ru: 'Компонент для создания простых SVG фигур'
  },
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = SVGShape;
exports["default"] = _default;