"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _widgets = require("@quarkly/widgets");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var AccordionItem = function AccordionItem(_ref) {
  var open = _ref.isOpen,
      disabled = _ref.disabled,
      _ref$openItems = _ref.openItems,
      openItems = _ref$openItems === void 0 ? [] : _ref$openItems,
      _ref$onToggleOpen = _ref.onToggleOpen,
      onToggleOpen = _ref$onToggleOpen === void 0 ? function () {} : _ref$onToggleOpen,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, ["isOpen", "disabled", "openItems", "onToggleOpen", "children"]);

  var idxRef = (0, _react.useRef)("".concat(Date.now() + Math.random()));
  var openIdx = openItems.includes(idxRef.current);
  (0, _react.useEffect)(function () {
    if (open) {
      onToggleOpen({
        idx: idxRef.current,
        open: !open,
        disabled: disabled
      });
    }
  }, [onToggleOpen, open, disabled]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    "flex-direction": "column",
    display: "flex"
  }, rest), _react["default"].Children.map(children, function (child) {
    return /*#__PURE__*/_react["default"].isValidElement(child) ? /*#__PURE__*/_react["default"].cloneElement(child, {
      idx: idxRef.current,
      open: openIdx,
      disabled: disabled,
      onToggleOpen: onToggleOpen
    }) : child;
  }));
};

var propInfo = {
  isOpen: {
    control: 'checkbox',
    category: 'Main',
    weight: '1'
  },
  disabled: {
    control: 'checkbox',
    category: 'Main',
    weight: '1'
  }
};
var defaultProps = {
  open: true,
  disabled: false
};

var _default = Object.assign(AccordionItem, {
  propInfo: propInfo,
  defaultProps: defaultProps
});

exports["default"] = _default;