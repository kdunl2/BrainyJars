"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _utils = require("../utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var overrides = {
  'Card Flip Content': {
    kind: 'Box',
    props: {
      width: '100%',
      'min-width': '0',
      'min-height': '0',
      'transform-style': 'preserve-3d',
      position: 'relative',
      cursor: 'pointer'
    }
  },
  'Card Flip Image': {
    kind: 'Image',
    props: {
      width: '100%',
      height: '100%',
      src: 'https://uploads.quarkly.io/molecules/default-picture-1200.png',
      'object-position': '50% 50%',
      'object-fit': 'cover'
    }
  },
  'Card Flip Item': {
    kind: 'Box',
    props: {
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      'backface-visibility': 'hidden',
      position: 'absolute'
    }
  },
  'Card Flip Item Face': {
    kind: 'Box'
  },
  'Card Flip Item Back': {
    kind: 'Box',
    props: {
      padding: '24px 16px',
      background: '--color-lightD2',
      'box-sizing': 'border-box'
    }
  }
};
var flipStyles = {
  toRight: {
    transform: 'rotateY(180deg)'
  },
  toLeft: {
    transform: 'rotateY(-180deg)'
  },
  toUp: {
    transform: 'rotateX(180deg)'
  },
  toDown: {
    transform: 'rotateX(-180deg)'
  }
};
var cardHeights = {
  auto: 'auto',
  '16:9': '56.25%',
  '4:3': '75%',
  '1:1': '100%',
  '3:4': '133.33%',
  '9:16': '177.78%'
};

var CardFlip = function CardFlip(_ref) {
  var flipTriggerProp = _ref.flipTriggerProp,
      flipDirectionProp = _ref.flipDirectionProp,
      flipDurationProp = _ref.flipDurationProp,
      timingFunctionProp = _ref.timingFunctionProp,
      aspectRatioProp = _ref.aspectRatioProp,
      isFlippedProp = _ref.isFlippedProp,
      props = _objectWithoutProperties(_ref, ["flipTriggerProp", "flipDirectionProp", "flipDurationProp", "timingFunctionProp", "aspectRatioProp", "isFlippedProp"]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  var _useState = (0, _react.useState)(isFlippedProp),
      _useState2 = _slicedToArray(_useState, 2),
      isFlipped = _useState2[0],
      setFlipped = _useState2[1];

  var flipTrigger = flipTriggerProp === 'click';
  var flipDuration = (0, _utils.parseTime)(flipDurationProp);
  var onClickFlip = (0, _react.useCallback)(function () {
    if (flipTrigger) setFlipped(function (prevFlipped) {
      return !prevFlipped;
    });
  }, [flipTrigger]);
  var onHoverFlip = (0, _react.useCallback)(function () {
    if (!flipTrigger) setFlipped(function (prevFlipped) {
      return !prevFlipped;
    });
  }, [flipTrigger]);
  (0, _react.useEffect)(function () {
    setFlipped(isFlippedProp);
  }, [isFlippedProp]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    height: aspectRatioProp === 'auto' ? '500px' : 'auto',
    onMouseEnter: onHoverFlip,
    onMouseLeave: onHoverFlip,
    onClick: onClickFlip,
    width: "100%",
    "max-width": "400px",
    perspective: "600px",
    position: "relative"
  }, rest), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    transition: "transform ".concat(flipDuration, "ms ").concat(timingFunctionProp)
  }, override('Card Flip Content'), isFlipped && flipStyles[flipDirectionProp], {
    "padding-top": aspectRatioProp !== 'auto' ? cardHeights[aspectRatioProp] : undefined,
    height: aspectRatioProp !== 'auto' ? '0' : '100%'
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Box, override("Card Flip Item", "Card Flip Item Face"), /*#__PURE__*/_react["default"].createElement(_widgets.Image, override('Card Flip Image'))), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, override("Card Flip Item", "Card Flip Item Back"), flipStyles[flipDirectionProp]), children)));
};

var propInfo = {
  flipTriggerProp: {
    title: {
      en: 'Flip trigger',
      ru: 'Триггер переворота'
    },
    control: 'radio-group',
    variants: [{
      title: {
        en: 'On click',
        ru: 'По клику'
      },
      value: 'click'
    }, {
      title: {
        en: 'On hover',
        ru: 'По наведению'
      },
      value: 'hover'
    }],
    category: 'Main',
    weight: 0.5
  },
  flipDirectionProp: {
    title: {
      en: 'Flip direction',
      ru: 'Напраление переворота'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Right',
        ru: 'Вправо'
      },
      value: 'toRight'
    }, {
      title: {
        en: 'Left',
        ru: 'Влево'
      },
      value: 'toLeft'
    }, {
      title: {
        en: 'Up',
        ru: 'Вверх'
      },
      value: 'toUp'
    }, {
      title: {
        en: 'Down',
        ru: 'Вниз'
      },
      value: 'toDown'
    }],
    category: 'Main',
    weight: 0.5
  },
  aspectRatioProp: {
    title: {
      en: 'Aspect ratio',
      ru: 'Соотношение сторон'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Manually',
        ru: 'Вручную'
      },
      value: 'auto'
    }, '16:9', '4:3', '1:1', '3:4', '9:16'],
    category: 'Main',
    weight: 0.5
  },
  flipDurationProp: {
    title: {
      en: 'Animation duration',
      ru: 'Длительность анимации'
    },
    control: 'input',
    variants: ['0s', '0.1s', '0.2s', '0.3s', '0.5s', '1s'],
    type: 'text',
    category: 'Animation',
    weight: 0.5
  },
  timingFunctionProp: {
    title: {
      en: 'Animation timing function',
      ru: 'Функция сглаживания анимации'
    },
    control: 'input',
    variants: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end'],
    category: 'Animation',
    weight: 0.5
  },
  isFlippedProp: {
    title: {
      en: 'Flip a card',
      ru: 'Перевернуть карточку'
    },
    control: 'checkbox',
    category: 'Test',
    weight: 1
  }
};
var defaultProps = {
  flipTriggerProp: 'click',
  flipDirectionProp: 'toRight',
  aspectRatioProp: 'auto',
  flipDurationProp: '1s',
  timingFunctionProp: 'cubic-bezier(.50,-0.35,.50,1.65)',
  isFlippedProp: false
};
Object.assign(CardFlip, {
  title: 'Card Flip',
  description: {
    en: 'Card flip with image. Rotation either on click or on mouseover',
    ru: 'Вращающаяся карточка с изображением. Вращается по клику или наведению курсора'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});
var _default = CardFlip;
exports["default"] = _default;