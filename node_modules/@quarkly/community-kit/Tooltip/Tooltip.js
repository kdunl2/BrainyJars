"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@quarkly/components");

var _widgets = require("@quarkly/widgets");

var _ComponentNotice = _interopRequireDefault(require("../ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var DEFAULT_OFFSET = 4;
var overrides = {
  Content: {
    kind: 'Box',
    props: {
      width: '100%',
      'min-height': '0px'
    }
  },
  Wrapper: {
    kind: 'Box',
    props: {
      width: 'max-content',
      display: 'flex',
      'align-items': 'center',
      'justify-content': 'center',
      'text-align': 'center',
      transition: 'opacity .8s, visibility .8s',
      'pointer-events': 'all',
      position: 'absolute'
    }
  },
  Title: {
    kind: 'Text',
    props: {
      children: 'Some text',
      margin: '0px',
      padding: '10px 15px',
      'max-width': '150px',
      'max-height': '100px',
      color: 'white',
      background: 'black',
      'word-break': 'break-word',
      'overflow-x': 'hidden'
    }
  },
  Arrow: {
    kind: 'Box',
    props: {
      margin: '0px',
      'min-width': '0px',
      'min-height': '0px',
      position: 'absolute',
      'z-index': '1'
    }
  }
}; // Рассчёт доступного пространства для каждой стороны

var checkDirections = {
  top: function top(prop) {
    return prop.wrapperRect.height + prop.arrowSizeNumb + prop.tooltipOffsetNumb + prop.contentOffsetNumb <= prop.componentRect.top;
  },
  right: function right(prop) {
    return prop.wrapperRect.width + prop.arrowSizeNumb + prop.tooltipOffsetNumb + prop.contentOffsetNumb <= window.innerWidth - prop.componentRect.width - prop.componentRect.left;
  },
  bottom: function bottom(prop) {
    return prop.wrapperRect.height + prop.arrowSizeNumb + prop.tooltipOffsetNumb + prop.contentOffsetNumb <= window.innerHeight - prop.componentRect.height - prop.componentRect.top;
  },
  left: function left(prop) {
    return prop.wrapperRect.width + prop.arrowSizeNumb + prop.tooltipOffsetNumb + prop.contentOffsetNumb <= prop.componentRect.left;
  }
}; // Порядок проверки мест, в зависимости от выбранной стороны

var orderDirections = {
  left: ['left', 'right', 'top', 'bottom'],
  right: ['right', 'left', 'top', 'bottom'],
  top: ['top', 'bottom', 'left', 'right'],
  bottom: ['bottom', 'top', 'left', 'right']
}; // Варианты положения тултипа

var getWrapperPosition = {
  top: function top(props) {
    return {
      bottom: "calc(100% + ".concat(props.contentOffsetNumb, "px + ").concat(props.arrowSizeNumb, "px)")
    };
  },
  right: function right(props) {
    return {
      left: "calc(100% + ".concat(props.contentOffsetNumb, "px + ").concat(props.arrowSizeNumb, "px)")
    };
  },
  bottom: function bottom(props) {
    return {
      top: "calc(100% + ".concat(props.contentOffsetNumb, "px + ").concat(props.arrowSizeNumb, "px)")
    };
  },
  left: function left(props) {
    return {
      right: "calc(100% + ".concat(props.contentOffsetNumb, "px + ").concat(props.arrowSizeNumb, "px)")
    };
  }
}; // Варианты положения стрелки

var getArrowPosition = {
  top: function top(props) {
    return {
      bottom: "-".concat(props.arrowSizeNumb, "px"),
      'border-top': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid ").concat(props.tooltipColorProp),
      'border-right': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent"),
      'border-left': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent")
    };
  },
  bottom: function bottom(props) {
    return {
      top: "-".concat(props.arrowSizeNumb, "px"),
      'border-bottom': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid ").concat(props.tooltipColorProp),
      'border-right': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent"),
      'border-left': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent")
    };
  },
  left: function left(props) {
    return {
      right: "-".concat(props.arrowSizeNumb, "px"),
      'border-left': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid ").concat(props.tooltipColorProp),
      'border-top': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent"),
      'border-bottom': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent")
    };
  },
  right: function right(props) {
    return {
      left: "-".concat(props.arrowSizeNumb, "px"),
      'border-right': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid ").concat(props.tooltipColorProp),
      'border-top': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent"),
      'border-bottom': "calc(".concat(props.arrowSizeNumb, "px + ").concat(pixelBug, "px) solid transparent")
    };
  }
}; // Смещение на 1px, чтобы скрыть границу между стрелкой и текстом

var pixelBug = 1;

var TooltipBlock = function TooltipBlock(_ref) {
  var wrapperRef = _ref.wrapperRef,
      tooltipPosition = _ref.tooltipPosition,
      tooltipStatusProp = _ref.tooltipStatusProp,
      tooltipStatusShow = _ref.tooltipStatusShow,
      tooltipColorProp = _ref.tooltipColorProp,
      arrowSizeNumb = _ref.arrowSizeNumb,
      contentOffsetNumb = _ref.contentOffsetNumb,
      arrowStatusProp = _ref.arrowStatusProp,
      override = _ref.override;
  var wrapperPositionStyles = (0, _react.useMemo)(function () {
    var position = getWrapperPosition[tooltipPosition] || getWrapperPosition.top;
    return position({
      contentOffsetNumb: contentOffsetNumb,
      arrowSizeNumb: arrowSizeNumb
    });
  }, [tooltipPosition, contentOffsetNumb, arrowSizeNumb]);
  var wrapperShowStyles = (0, _react.useMemo)(function () {
    return {
      visibility: tooltipStatusProp === 'always' || tooltipStatusShow ? 'visible ' : 'hidden',
      opacity: tooltipStatusProp === 'always' || tooltipStatusShow ? 1 : 0
    };
  }, [tooltipStatusProp, tooltipStatusShow]);
  var arrowPositionStyles = (0, _react.useMemo)(function () {
    return getArrowPosition[tooltipPosition]({
      tooltipColorProp: tooltipColorProp,
      arrowSizeNumb: arrowSizeNumb
    });
  }, [tooltipPosition, tooltipColorProp, arrowSizeNumb]);
  var arrowShowStyles = (0, _react.useMemo)(function () {
    return {
      visibility: arrowStatusProp ? 'visible ' : 'hidden',
      opacity: arrowStatusProp ? 1 : 0
    };
  }, [arrowStatusProp]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    top: "0%",
    left: "0%",
    width: "100%",
    height: "100%",
    "pointer-events": "none",
    position: "absolute",
    display: "flex"
  }, /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    ref: wrapperRef
  }, override('Wrapper'), wrapperPositionStyles, wrapperShowStyles), /*#__PURE__*/_react["default"].createElement(_widgets.Text, _extends({}, override('Title'), {
    "background-color": tooltipColorProp
  })), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, override('Arrow'), arrowPositionStyles, arrowShowStyles))));
};

var TooltipComponent = function TooltipComponent(_ref2) {
  var tooltipPositionProp = _ref2.tooltipPositionProp,
      tooltipOffsetProp = _ref2.tooltipOffsetProp,
      tooltipColorProp = _ref2.tooltipColorProp,
      tooltipStatusProp = _ref2.tooltipStatusProp,
      tooltipAutoChangeProp = _ref2.tooltipAutoChangeProp,
      arrowSizeProp = _ref2.arrowSizeProp,
      contentOffsetProp = _ref2.contentOffsetProp,
      arrowStatusProp = _ref2.arrowStatusProp,
      props = _objectWithoutProperties(_ref2, ["tooltipPositionProp", "tooltipOffsetProp", "tooltipColorProp", "tooltipStatusProp", "tooltipAutoChangeProp", "arrowSizeProp", "contentOffsetProp", "arrowStatusProp"]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      tooltipStatusShow = _useState2[0],
      settooltipStatusShow = _useState2[1];

  var _useState3 = (0, _react.useState)(tooltipPositionProp),
      _useState4 = _slicedToArray(_useState3, 2),
      tooltipPosition = _useState4[0],
      setTooltipDirection = _useState4[1];

  var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isEmpty = _useState6[0],
      setEmpty = _useState6[1];

  var arrowSizeNumb = (0, _react.useMemo)(function () {
    var isShowArrow = arrowStatusProp && parseInt(arrowSizeProp, 10) > 0;
    return isShowArrow ? parseInt(arrowSizeProp, 10) : 0;
  }, [arrowStatusProp, arrowSizeProp]);
  var contentOffsetNumb = (0, _react.useMemo)(function () {
    return parseInt(contentOffsetProp, 10) || DEFAULT_OFFSET;
  }, [contentOffsetProp]);
  var componentRef = (0, _react.useRef)(null);
  var wrapperRef = (0, _react.useRef)(null);
  var contentRef = (0, _react.useRef)(null);
  var positionTooltip = (0, _react.useCallback)(function () {
    if (!tooltipAutoChangeProp) {
      setTooltipDirection(tooltipPositionProp);
      return;
    }

    if (!componentRef.current || !wrapperRef.current) return;
    var componentRect = componentRef.current.getBoundingClientRect();
    var wrapperRect = wrapperRef.current.getBoundingClientRect();
    var tooltipOffsetNumb = parseInt(tooltipOffsetProp, 10);
    setTooltipDirection(orderDirections[tooltipPositionProp].find(function (position) {
      return checkDirections[position]({
        componentRect: componentRect,
        wrapperRect: wrapperRect,
        tooltipOffsetNumb: tooltipOffsetNumb,
        arrowSizeNumb: arrowSizeNumb,
        contentOffsetNumb: contentOffsetNumb
      });
    }) || 'top');
  }, [tooltipPositionProp, tooltipOffsetProp, tooltipAutoChangeProp, contentOffsetNumb, arrowSizeNumb]);
  (0, _react.useEffect)(function () {
    positionTooltip();
    var observer = new ResizeObserver(positionTooltip);
    observer.observe(document.body);
    return function () {
      return observer.unobserve(document.body);
    };
  }, [positionTooltip, setTooltipDirection, tooltipPositionProp]); // Если компонент пустой

  (0, _react.useEffect)(function () {
    var _contentRef$current;

    setEmpty(((_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.innerHTML) === '<!--child placeholder-->');
  }, [children]); // Наведение курсора на компонент

  var showTooltip = function showTooltip() {
    if (tooltipStatusProp === 'always') return;
    settooltipStatusShow(true);
  }; // Отведение курсора из компонента


  var hideTooltip = function hideTooltip() {
    if (tooltipStatusProp === 'always') return;
    settooltipStatusShow(false);
  };

  var tooltipProps = {
    tooltipPosition: tooltipPosition,
    tooltipStatusProp: tooltipStatusProp,
    tooltipStatusShow: tooltipStatusShow,
    tooltipColorProp: tooltipColorProp,
    arrowSizeNumb: arrowSizeNumb,
    contentOffsetNumb: contentOffsetNumb,
    arrowStatusProp: arrowStatusProp
  };
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    ref: componentRef,
    onMouseEnter: showTooltip,
    onMouseLeave: hideTooltip,
    position: "relative"
  }, rest), /*#__PURE__*/_react["default"].createElement(TooltipBlock, _extends({
    wrapperRef: wrapperRef,
    override: override
  }, tooltipProps)), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    ref: contentRef
  }, override('Content')), children), isEmpty && /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: 'Drag any component here'
  }));
};

var propInfo = {
  tooltipStatusProp: {
    title: {
      en: 'Show Tooltip',
      ru: 'Показывать Tooltip'
    },
    control: 'radio-group',
    variants: [{
      title: {
        en: 'Always',
        ru: 'Всегда'
      },
      value: 'always'
    }, {
      title: {
        en: 'On hover',
        ru: 'При наведении'
      },
      value: 'hover'
    }],
    category: 'Tooltip',
    weight: 1
  },
  tooltipPositionProp: {
    title: {
      en: 'Tooltip position',
      ru: 'Положение Tooltip'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Top',
        ru: 'Сверху'
      },
      value: 'top'
    }, {
      title: {
        en: 'Right',
        ru: 'Справа'
      },
      value: 'right'
    }, {
      title: {
        en: 'Bottom',
        ru: 'Снизу'
      },
      value: 'bottom'
    }, {
      title: {
        en: 'Left',
        ru: 'Слева'
      },
      value: 'left'
    }],
    category: 'Tooltip',
    weight: 0.5
  },
  tooltipOffsetProp: {
    title: {
      en: 'Window border indent',
      ru: 'Отступ от границ окна'
    },
    control: 'input',
    variants: ['0px', '4px', '8px', '16px', '24px'],
    type: 'text',
    category: 'Tooltip',
    weight: 0.5
  },
  contentOffsetProp: {
    title: {
      en: 'Content border indent',
      ru: 'Отступ от границы контента'
    },
    control: 'input',
    variants: ['0px', '4px', '8px', '12px', '16px'],
    type: 'text',
    category: 'Tooltip',
    weight: 0.5
  },
  tooltipColorProp: {
    title: {
      en: 'Tooltip background color',
      ru: 'Цвет фона Tooltip'
    },
    control: 'color',
    category: 'Tooltip',
    weight: 1
  },
  arrowStatusProp: {
    title: {
      en: 'Show the arrow',
      ru: 'Показать стрелочку'
    },
    control: 'checkbox',
    category: 'Arrow',
    weight: 1
  },
  arrowSizeProp: {
    title: {
      en: 'Arrow size (px)',
      ru: 'Размер стрелочки (px)'
    },
    control: 'input',
    variants: ['0px', '4px', '8px', '12px', '16px'],
    type: 'text',
    category: 'Arrow',
    weight: 0.5
  },
  tooltipAutoChangeProp: {
    title: {
      en: 'Auto position change',
      ru: 'Автоматическая смена положения'
    },
    control: 'checkbox',
    category: 'Tooltip',
    weight: 1
  }
};
var defaultProps = {
  display: 'inline-block',
  tooltipStatusProp: 'always',
  tooltipPositionProp: 'top',
  tooltipColorProp: '#000000',
  tooltipOffsetProp: '0',
  contentOffsetProp: "".concat(DEFAULT_OFFSET, "px"),
  arrowStatusProp: true,
  arrowSizeProp: '8px',
  tooltipAutoChangeProp: true
};
Object.assign(TooltipComponent, {
  title: 'Tooltip',
  description: {
    en: 'The container component shows a text tooltip when you mouse over the content',
    ru: 'Компонент-контейнер показывает текстовую подсказку при наведении курсора на содержимое'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});
var _default = TooltipComponent;
exports["default"] = _default;