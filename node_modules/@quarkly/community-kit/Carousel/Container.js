"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _props = require("./props");

var _store = require("./store");

var _Component = _interopRequireDefault(require("./Component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Container = function Container(props) {
  var store = (0, _react.useMemo)(function () {
    return (0, _redux.createStore)(_store.rootReducer, _store.initialState, (0, _redux.applyMiddleware)(_reduxThunk["default"]));
  }, []);
  var slidesProp = props.slidesProp,
      durationProp = props.durationProp,
      functionProp = props.functionProp,
      autoPlay = props.autoPlay,
      autoPlayBehavior = props.autoPlayBehavior,
      autoPlayIntervalProp = props.autoPlayIntervalProp,
      autoPlayDelayProp = props.autoPlayDelayProp,
      autoPlayPauseProp = props.autoPlayPauseProp;
  (0, _react.useEffect)(function () {
    store.dispatch((0, _store.init)({
      slidesProp: slidesProp,
      durationProp: durationProp,
      functionProp: functionProp,
      autoPlay: autoPlay,
      autoPlayBehavior: autoPlayBehavior,
      autoPlayIntervalProp: autoPlayIntervalProp,
      autoPlayDelayProp: autoPlayDelayProp,
      autoPlayPauseProp: autoPlayPauseProp
    }));
    return function () {
      return store.dispatch((0, _store.deinit)());
    };
  }, [store, slidesProp, durationProp, functionProp, autoPlay, autoPlayBehavior, autoPlayIntervalProp, autoPlayDelayProp, autoPlayPauseProp]);
  return /*#__PURE__*/_react["default"].createElement(_reactRedux.Provider, {
    store: store
  }, /*#__PURE__*/_react["default"].createElement(_Component["default"], props));
};

Object.assign(Container, {
  title: 'Carousel',
  description: {
    en: 'Slider with images that can be scrolled by pressing the arrows or dot buttons',
    ru: 'Лента с изображениями, которую можно листать нажатием на стрелки или точки'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps,
  overrides: _props.overrides
});
var _default = Container;
exports["default"] = _default;