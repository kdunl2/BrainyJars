"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.deinit = deinit;
exports.clickNext = exports.clickPrev = void 0;

var _utils = require("../../utils");

var _props = require("../props");

var _initialState = _interopRequireDefault(require("./initial-state"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function init(_ref) {
  var slidesProp = _ref.slidesProp,
      durationProp = _ref.durationProp,
      functionProp = _ref.functionProp,
      autoPlay = _ref.autoPlay,
      autoPlayBehavior = _ref.autoPlayBehavior,
      autoPlayIntervalProp = _ref.autoPlayIntervalProp,
      autoPlayDelayProp = _ref.autoPlayDelayProp,
      autoPlayPauseProp = _ref.autoPlayPauseProp;
  return function (dispatch) {
    var slidesNumb = parseInt(slidesProp, 10) > 0 ? parseInt(slidesProp, 10) : 1;
    var slidesList = [slidesNumb].concat(_toConsumableArray(Array.from({
      length: slidesNumb
    }, function (_, i) {
      return i + 1;
    })), [1]);
    var animDuration = parseFloat(durationProp) > 0 ? parseFloat(durationProp) * 1000 : 0;
    var animFunction = functionProp;
    var autoPlayInterval = (0, _utils.parseTime)(autoPlayIntervalProp, _props.defaultProps.autoPlayIntervalProp);
    var autoPlayDelay = (0, _utils.parseTime)(autoPlayDelayProp, _props.defaultProps.autoPlayDelayProp);
    var autoPlayPause = (0, _utils.parseTime)(autoPlayPauseProp, _props.defaultProps.autoPlayPauseProp);
    dispatch(_objectSpread(_objectSpread({
      type: 'SET_DATA'
    }, _initialState["default"]), {}, {
      slidesNumb: slidesNumb,
      slidesList: slidesList,
      animDuration: animDuration,
      animFunction: animFunction,
      autoPlay: autoPlay,
      autoPlayBehavior: autoPlayBehavior,
      autoPlayInterval: autoPlayInterval,
      autoPlayDelay: autoPlayDelay,
      autoPlayPause: autoPlayPause
    }));

    if (autoPlay) {
      dispatch(startAutoPlay());
    }
  };
}

var clickPrev = function clickPrev() {
  return function (dispatch) {
    dispatch(pauseAutoPlay());
    dispatch(prevSlide());
  };
};

exports.clickPrev = clickPrev;

var clickNext = function clickNext() {
  return function (dispatch) {
    dispatch(pauseAutoPlay());
    dispatch(nextSlide());
  };
};

exports.clickNext = clickNext;

var pauseAutoPlay = function pauseAutoPlay() {
  return function (dispatch, getState) {
    var _getState = getState(),
        autoPlay = _getState.autoPlay,
        autoPlayPause = _getState.autoPlayPause,
        autoPlayPauseId = _getState.autoPlayPauseId,
        lock = _getState.lock;

    if (!autoPlay || lock) return;
    clearTimeout(autoPlayPauseId);
    var autoPlayPauseIdTemp = setTimeout(function () {
      dispatch({
        type: 'SET_DATA',
        autoPlayPauseId: null
      });
    }, autoPlayPause);
    dispatch({
      type: 'SET_DATA',
      autoPlayPauseId: autoPlayPauseIdTemp
    });
  };
};

var startAutoPlay = function startAutoPlay() {
  return function (dispatch, getState) {
    var _getState2 = getState(),
        autoPlayBehavior = _getState2.autoPlayBehavior,
        autoPlayInterval = _getState2.autoPlayInterval,
        autoPlayDelay = _getState2.autoPlayDelay; // Delay before auto play starts


    var autoPlayDelayIdTemp = setTimeout(function () {
      // auto play interval
      var autoPlayIntervalIdTemp = setInterval(function () {
        var _getState3 = getState(),
            slidesNumb = _getState3.slidesNumb,
            active = _getState3.active,
            autoPlayPauseId = _getState3.autoPlayPauseId; // pass when auto play paused


        if (autoPlayPauseId) {
          return;
        }

        if (autoPlayBehavior === 'range' && active >= slidesNumb) {
          dispatch(stopAutoPlay());
          return;
        }

        dispatch(nextSlide());
      }, autoPlayInterval);
      dispatch({
        type: 'SET_DATA',
        autoPlayIntervalId: autoPlayIntervalIdTemp
      });
    }, autoPlayDelay);
    dispatch({
      type: 'SET_DATA',
      autoPlayDelayId: autoPlayDelayIdTemp
    });
  };
};

var stopAutoPlay = function stopAutoPlay() {
  return function (dispatch, getState) {
    var _getState4 = getState(),
        autoPlayDelayId = _getState4.autoPlayDelayId,
        autoPlayIntervalId = _getState4.autoPlayIntervalId,
        autoPlayPauseId = _getState4.autoPlayPauseId;

    clearTimeout(autoPlayPauseId);
    clearTimeout(autoPlayDelayId);
    clearInterval(autoPlayIntervalId);
    dispatch({
      type: 'SET_DATA',
      autoPlayIntervalId: null,
      autoPlayDelayId: null,
      autoPlayPauseId: null
    });
  };
};

var prevSlide = function prevSlide() {
  return function (dispatch, getState) {
    var _getState5 = getState(),
        slidesNumb = _getState5.slidesNumb,
        animDuration = _getState5.animDuration,
        animTimeoutId = _getState5.animTimeoutId,
        active = _getState5.active,
        lock = _getState5.lock;

    if (lock) return;
    var newActive = active > 1 ? active - 1 : slidesNumb;

    if (newActive === slidesNumb) {
      dispatch({
        type: 'SET_SLIDE',
        active: newActive,
        position: 0,
        animate: true,
        lock: true
      });
      clearTimeout(animTimeoutId);
      var tId = setTimeout(function () {
        dispatch({
          type: 'SET_SLIDE',
          active: newActive,
          position: 100 * slidesNumb,
          animate: false,
          lock: false
        });
      }, animDuration);
      dispatch({
        type: 'SET_DATA',
        animTimeoutId: tId
      });
    } else {
      dispatch({
        type: 'SET_SLIDE',
        active: newActive,
        position: 100 * newActive,
        animate: true,
        lock: false
      });
    }
  };
};

var nextSlide = function nextSlide() {
  return function (dispatch, getState) {
    var _getState6 = getState(),
        slidesNumb = _getState6.slidesNumb,
        animDuration = _getState6.animDuration,
        animTimeoutId = _getState6.animTimeoutId,
        active = _getState6.active,
        lock = _getState6.lock;

    if (lock) return;
    var newActive = active < slidesNumb ? active + 1 : 1;

    if (newActive === 1) {
      clearTimeout(animTimeoutId);
      dispatch({
        type: 'SET_SLIDE',
        active: newActive,
        position: 100 * (slidesNumb + 1),
        animate: true,
        lock: true
      });
      var tId = setTimeout(function () {
        dispatch({
          type: 'SET_SLIDE',
          active: newActive,
          position: 100,
          animate: false,
          lock: false
        });
      }, animDuration);
      dispatch({
        type: 'SET_DATA',
        animTimeoutId: tId
      });
    } else {
      dispatch({
        type: 'SET_SLIDE',
        active: newActive,
        position: 100 * newActive,
        animate: true,
        lock: false
      });
    }
  };
};

function deinit() {
  return function (dispatch, getState) {
    var _getState7 = getState(),
        animTimeoutId = _getState7.animTimeoutId,
        autoPlayIntervalId = _getState7.autoPlayIntervalId,
        autoPlayDelayId = _getState7.autoPlayDelayId,
        autoPlayPauseId = _getState7.autoPlayPauseId;

    clearTimeout(animTimeoutId);
    clearInterval(autoPlayIntervalId);
    clearTimeout(autoPlayDelayId);
    clearTimeout(autoPlayPauseId);
    dispatch(_objectSpread({
      type: 'SET_DATA'
    }, _initialState["default"]));
  };
}