"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var controls = {
  input: 'text',
  number: 'number',
  range: 'range',
  href: 'text',
  font: 'text',
  shadow: 'text',
  transition: 'text',
  transform: 'text',
  filter: 'text',
  background: 'text',
  color: 'color',
  'checkbox-icon': 'boolean',
  checkbox: 'boolean',
  'radio-icon': 'boolean',
  'radio-group': 'radio',
  select: 'select'
};

var getArgTypes = function getArgTypes(propInfo, defaultProps, hidden) {
  return Object.keys(propInfo).reduce(function (argTypes, key) {
    var value = propInfo[key];
    var argType = {
      name: value.title.en,
      control: {
        type: controls[value.control]
      },
      table: {
        defaultValue: {
          summary: defaultProps[key]
        },
        category: value.category
      }
    };

    if (value.control === 'input' && value.type === 'number') {
      argType.control.type = controls.number;
    }

    if (value.control === 'input' && value.variants && value.variants[0] !== '0s') {
      argType.control.type = controls.select;
      argType.options = value.variants;
    }

    if (value.control === 'radio-group' || value.control === 'select') {
      argType.options = value.variants.map(function (v) {
        return typeof v === 'string' ? v : v.value;
      });
    }

    if (Array.isArray(hidden) && hidden.includes(key)) {
      argType.control.type = null;
    }

    return _objectSpread(_objectSpread({}, argTypes), {}, _defineProperty({}, key, argType));
  }, {});
};

var _default = getArgTypes;
exports["default"] = _default;