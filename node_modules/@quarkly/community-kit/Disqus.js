"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _disqusReact = require("disqus-react");

var _components = require("@quarkly/components");

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _ComponentNotice = _interopRequireDefault(require("./ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var overrides = {
  'Disqus Content': {
    kind: 'Disqus Content',
    props: {
      width: '100%',
      height: 'auto'
    }
  }
};

var Wrapper = _atomize["default"].div();

var Content = _atomize["default"].div();

var DisqusComponent = function DisqusComponent(_ref) {
  var shortnameProp = _ref.shortnameProp,
      languageProp = _ref.languageProp,
      identifierProp = _ref.identifierProp,
      urlProp = _ref.urlProp,
      titleProp = _ref.titleProp,
      props = _objectWithoutProperties(_ref, ["shortnameProp", "languageProp", "identifierProp", "urlProp", "titleProp"]);

  var _useOverrides = (0, _components.useOverrides)(props, overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var commentsParams = (0, _react.useMemo)(function () {
    return {
      identifier: identifierProp,
      url: urlProp,
      title: titleProp,
      language: languageProp
    };
  }, [identifierProp, urlProp, titleProp, languageProp]);
  return /*#__PURE__*/_react["default"].createElement(Wrapper, _extends({
    width: "100%"
  }, rest), identifierProp ? /*#__PURE__*/_react["default"].createElement(Content, _extends({}, override('Disqus Content'), {
    display: !identifierProp && 'none'
  }), /*#__PURE__*/_react["default"].createElement(_disqusReact.DiscussionEmbed, {
    shortname: shortnameProp,
    config: commentsParams
  })) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add your discussion ID in the Props panel"
  }));
};

var propInfo = {
  identifierProp: {
    title: {
      en: 'Discussion ID',
      ru: 'ID обсуждения'
    },
    control: 'input',
    type: 'text',
    category: 'Discussions',
    weight: 1
  },
  urlProp: {
    title: {
      en: 'Discussion URL',
      ru: 'URL-адрес обсуждения'
    },
    control: 'input',
    type: 'text',
    category: 'Discussions',
    weight: 1
  },
  titleProp: {
    title: {
      en: 'Discussion title',
      ru: 'Заголовок обсуждения'
    },
    control: 'input',
    type: 'text',
    category: 'Discussions',
    weight: 1
  },
  shortnameProp: {
    title: {
      en: 'Your feed name',
      ru: 'Имя вашей ленты'
    },
    control: 'input',
    type: 'text',
    category: 'General',
    weight: 0.5
  },
  languageProp: {
    title: {
      en: 'Widget language',
      ru: 'Язык виджета'
    },
    control: 'input',
    variants: ['en', 'de', 'fr', 'ru'],
    type: 'text',
    weight: 0.5
  }
};
var defaultProps = {
  languageProp: 'en'
};
Object.assign(DisqusComponent, {
  title: 'Disqus',
  description: {
    en: 'This component allows you to add the Disqus widget',
    ru: 'Компонент для встраивания виджета с формой комментариев Disqus'
  },
  propInfo: propInfo,
  defaultProps: defaultProps,
  overrides: overrides
});
var _default = DisqusComponent;
exports["default"] = _default;