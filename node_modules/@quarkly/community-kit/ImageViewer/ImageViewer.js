"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _widgets = require("@quarkly/widgets");

var _components = require("@quarkly/components");

var _props = require("./props");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Figure = _atomize["default"].figure();

var Figcaption = _atomize["default"].figcaption();

var Overlay = _atomize["default"].div({
  effects: {
    hover: ':hover',
    focus: ':focus',
    active: ':active',
    disabled: ':disabled',
    'hover-button': ':hover button'
  }
});

var ImageViewer = function ImageViewer(_ref) {
  var src = _ref.src,
      transition = _ref.transition,
      duration = _ref.duration,
      timingFunction = _ref.timingFunction,
      showCaption = _ref.showCaption,
      showLightbox = _ref.showLightbox,
      showButtonOpen = _ref.showButtonOpen,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, ["src", "transition", "duration", "timingFunction", "showCaption", "showLightbox", "showButtonOpen", "size"]);

  var _useState = (0, _react.useState)(showLightbox),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var _useState3 = (0, _react.useState)(1),
      _useState4 = _slicedToArray(_useState3, 2),
      scale = _useState4[0],
      setScale = _useState4[1];

  var _useState5 = (0, _react.useState)([0, 0]),
      _useState6 = _slicedToArray(_useState5, 2),
      translateXY = _useState6[0],
      setTranslateXY = _useState6[1];

  var _useState7 = (0, _react.useState)(':vertical'),
      _useState8 = _slicedToArray(_useState7, 2),
      captionContainerMode = _useState8[0],
      setCaptionContainerMode = _useState8[1];

  var imageContainerRef = (0, _react.useRef)();
  var transitioningRef = (0, _react.useRef)();
  var captionContainerRef = (0, _react.useRef)();

  var _useIsTransitioning = (0, _utils.useIsTransitioning)(transitioningRef),
      _useIsTransitioning2 = _slicedToArray(_useIsTransitioning, 2),
      isTransitioning = _useIsTransitioning2[0],
      startTransition = _useIsTransitioning2[1];

  var _useOverrides = (0, _components.useOverrides)(props, _props.overrides),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var mode = (0, _widgets.useConstructorMode)();
  (0, _react.useEffect)(function () {
    if (showLightbox) {
      calculateScaleAndXY();
    }

    setOpen(showLightbox);
  }, [calculateScaleAndXY, showLightbox]);
  var calculateScaleAndXY = (0, _react.useCallback)(function () {
    var isTextBottom = window.innerWidth / window.innerHeight <= 1.5;
    setTimeout(function () {
      var _captionContainerRef$, _captionContainerRef$2;

      var imageContainerRect = imageContainerRef.current.getBoundingClientRect();
      var captionContainerRect = (_captionContainerRef$ = (_captionContainerRef$2 = captionContainerRef.current) === null || _captionContainerRef$2 === void 0 ? void 0 : _captionContainerRef$2.getBoundingClientRect()) !== null && _captionContainerRef$ !== void 0 ? _captionContainerRef$ : {
        top: 0,
        left: 0,
        height: 0,
        width: 0
      };
      var newScale = (0, _utils.getScale)(imageContainerRect, captionContainerRect, isTextBottom);
      var diff = (0, _utils.getDiff)(imageContainerRect, newScale, captionContainerRect, isTextBottom);

      var _getXY = (0, _utils.getXY)(imageContainerRect, newScale, diff, isTextBottom),
          X = _getXY.X,
          Y = _getXY.Y;

      setTranslateXY([X, Y]);
      setScale(newScale);
    }, 10);
    setCaptionContainerMode(isTextBottom ? ':horizontal' : ':vertical');
  }, []);
  (0, _react.useEffect)(function () {
    calculateScaleAndXY();
  }, [calculateScaleAndXY, showCaption]);
  var onImageOverlayClick = (0, _react.useCallback)(function () {
    if (mode !== 'constructor') {
      calculateScaleAndXY();
      setOpen(true);
    }
  }, [calculateScaleAndXY, mode]);
  var onOutsideOverlayClick = (0, _react.useCallback)(function () {
    if (mode !== 'constructor') {
      setOpen(false);
      startTransition(true);
    }
  }, [mode, startTransition]);
  var scrollHandler = (0, _react.useCallback)(function () {
    if (isOpen) {
      startTransition(true);
    }

    setOpen(false);
  }, [isOpen, startTransition]);
  var resizeHandler = (0, _react.useCallback)(function () {
    if (isOpen) {
      calculateScaleAndXY();
    }
  }, [calculateScaleAndXY, isOpen]);
  (0, _react.useEffect)(function () {
    window.addEventListener('scroll', scrollHandler);
    window.addEventListener('resize', resizeHandler);
    return function () {
      window.removeEventListener('scroll', scrollHandler);
      window.removeEventListener('resize', resizeHandler);
    };
  }, [scrollHandler, resizeHandler]);
  var isRealOpened = isOpen || isTransitioning;
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    padding: "20px"
  }, rest), /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    position: "relative"
  }, /*#__PURE__*/_react["default"].createElement(Figure, _extends({
    margin: "none"
  }, override('Figure')), /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    ref: imageContainerRef,
    position: "relative",
    width: size === 'scale' ? '100%' : 'fit-content',
    style: {
      zIndex: isRealOpened ? '100' : '40',
      pointerEvents: isRealOpened && 'none'
    }
  }, /*#__PURE__*/_react["default"].createElement(Overlay, _extends({}, override('Overlay'), {
    display: isRealOpened && 'none',
    onClick: onImageOverlayClick,
    z: "10",
    "hover-button-opacity": "1"
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Button, _extends({}, override('Button', 'Button :open', {
    defaultKey: 'Button :open'
  }), {
    opacity: showButtonOpen ? '1' : '0'
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, override('Icon', 'Icon :open', {
    defaultKey: 'Icon :open'
  })))), /*#__PURE__*/_react["default"].createElement(_widgets.Box, {
    "font-size": "0",
    "line-height": "0"
  }, /*#__PURE__*/_react["default"].createElement(_widgets.Image, _extends({
    width: size === 'scale' ? '100%' : 'fit-content'
  }, override('Image'), {
    "transition-duration": duration,
    "transition-timing-function": timingFunction,
    ref: transitioningRef,
    src: src,
    style: {
      transform: isOpen && "translate(".concat(translateXY[0], "px, ").concat(translateXY[1], "px) scale(").concat(scale, ")"),
      zIndex: isOpen ? '200' : '',
      pointerEvents: isRealOpened ? 'all' : '',
      width: isOpen && '100%'
    }
  })))), /*#__PURE__*/_react["default"].createElement(Figcaption, override('Figcaption'), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Text')), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Authorship'))))), /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({}, override('Lightbox Overlay'), {
    "transition-duration": duration,
    "transition-timing-function": timingFunction,
    style: {
      opacity: isOpen ? 1 : 0,
      pointerEvents: !isOpen && 'none'
    },
    onClick: onOutsideOverlayClick
  })), /*#__PURE__*/_react["default"].createElement(_widgets.Button, _extends({}, override('Button', 'Button :close', {
    defaultKey: 'Button :close'
  }), {
    style: {
      opacity: isOpen ? 1 : 0,
      pointerEvents: !isOpen && 'none'
    },
    onClick: onOutsideOverlayClick
  }), /*#__PURE__*/_react["default"].createElement(_widgets.Icon, _extends({}, override('Icon', 'Icon :close', {
    defaultKey: 'Icon :close'
  }), {
    style: {
      opacity: isOpen ? 1 : 0,
      pointerEvents: !isOpen && 'none'
    }
  }))), showCaption && /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    ref: captionContainerRef
  }, override('Caption Container', "Caption Container ".concat(captionContainerMode), {
    defaultKey: "Caption Container ".concat(captionContainerMode)
  }), {
    "transition-duration": duration,
    "transition-timing-function": timingFunction,
    style: {
      opacity: isOpen ? 1 : 0,
      pointerEvents: 'none'
    }
  }), isRealOpened && /*#__PURE__*/_react["default"].createElement(_widgets.Box, null, /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Text')), /*#__PURE__*/_react["default"].createElement(_widgets.Text, override('Authorship')))));
};

Object.assign(ImageViewer, {
  title: 'ImageViewer',
  description: {
    en: 'The component is a picture with a caption. When you click on the picture, it opens to full screen.',
    ru: 'Компонент является картинкой с подписью. При клике на картинку она открывается на полный экран.'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps,
  overrides: _props.overrides
});
var _default = ImageViewer;
exports["default"] = _default;