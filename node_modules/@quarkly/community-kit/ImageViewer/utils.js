"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getScale = exports.getXY = exports.getDiff = exports.useIsTransitioning = void 0;

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useIsTransitioning = function useIsTransitioning(ref) {
  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isTransitioning = _useState2[0],
      setIsTransitioning = _useState2[1];

  var startTransition = (0, _react.useCallback)(function () {
    setIsTransitioning(true);

    if (window.getComputedStyle(ref.current).transitionDuration === '0s') {
      setIsTransitioning(false);
    }
  }, [ref]);
  var stopTransition = (0, _react.useCallback)(function () {
    setIsTransitioning(false);
  }, []);
  (0, _react.useEffect)(function () {
    var el = ref.current;

    var onTransitionStart = function onTransitionStart() {
      setIsTransitioning(true);
    };

    var onTransitionEnd = function onTransitionEnd() {
      setIsTransitioning(false);
    };

    if (el) {
      el.addEventListener('transitionstart', onTransitionStart);
      el.addEventListener('transitionend', onTransitionEnd);
      return function () {
        el.current.removeEventListener('transitionstart', onTransitionStart);
        el.current.removeEventListener('transitionend', onTransitionEnd);
      };
    }
  }, [ref]);
  return [isTransitioning, startTransition, stopTransition];
};

exports.useIsTransitioning = useIsTransitioning;

var getDiff = function getDiff(imageContainerRect, scale, captionContainerRect, isTextBottom) {
  var measure = isTextBottom ? 'height' : 'width';
  var viewportLength = getVieportWithoutScrollbars()[measure];
  var imageContainerLength = imageContainerRect[measure];
  var captionContainerLength = captionContainerRect[measure];
  var centerOfViewport = viewportLength / 2;
  var centerOfImage = imageContainerLength * scale / 2;
  return Math.min(centerOfViewport - centerOfImage - captionContainerLength, 0);
};

exports.getDiff = getDiff;

var getVieportWithoutScrollbars = function getVieportWithoutScrollbars() {
  return {
    height: document.documentElement.clientHeight,
    width: document.documentElement.clientWidth
  };
};

var getXY = function getXY(imageContainerRect, scale, diff, isTextBottom) {
  var top = imageContainerRect.top,
      left = imageContainerRect.left,
      height = imageContainerRect.height,
      width = imageContainerRect.width;
  var viewport = getVieportWithoutScrollbars();
  var X = viewport.width / 2 - left - width * scale / 2;
  var Y = viewport.height / 2 - top - height * scale / 2;
  if (isTextBottom) return {
    X: X,
    Y: Y + diff
  };
  return {
    X: X + diff,
    Y: Y
  };
};

exports.getXY = getXY;

var getScale = function getScale(imageContainerRect, captionContainerRect, isTextBottom) {
  var _getVieportWithoutScr = getVieportWithoutScrollbars(),
      height = _getVieportWithoutScr.height,
      width = _getVieportWithoutScr.width;

  var scale = Math.min(height / imageContainerRect.height, width / imageContainerRect.width);
  var imageHeight = imageContainerRect.height * scale;
  var imageWidth = imageContainerRect.width * scale;

  if (isTextBottom) {
    scale *= Math.min((height - captionContainerRect.height) / imageHeight, width / imageWidth);
  } else {
    scale *= Math.min((width - captionContainerRect.width) / imageWidth, height / imageHeight);
  }

  return scale;
};

exports.getScale = getScale;