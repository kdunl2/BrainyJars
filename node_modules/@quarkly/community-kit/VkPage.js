"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useDeepCompareEffect = _interopRequireDefault(require("use-deep-compare-effect"));

var _styledComponents = require("styled-components");

var _reactVk = _interopRequireWildcard(require("react-vk"));

var _widgets = require("@quarkly/widgets");

var _ComponentNotice = _interopRequireDefault(require("./ComponentNotice"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useDebounce = function useDebounce(value, timeout, deep) {
  var _useState = (0, _react.useState)(value),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var comp = deep ? _useDeepCompareEffect["default"] : _react.useEffect;
  comp(function () {
    var handler = setTimeout(function () {
      return setState(value);
    }, timeout);
    return function () {
      return clearTimeout(handler);
    };
  }, [value, timeout]);
  return state;
};

var hexColor = new RegExp(/^#[0-9A-F]{6}$/, 'i');

var useColor = function useColor(theme, rawColor, defaultColor) {
  return (0, _react.useMemo)(function () {
    var isVariable = rawColor.substring(0, 2) === '--';
    var color = isVariable ? theme.color[rawColor.substring(2)] : rawColor;
    return hexColor.test(color) ? color.substring(1) : defaultColor;
  }, [theme, rawColor, defaultColor]);
};

var VkPageComponent = function VkPageComponent(_ref) {
  var background = _ref.background,
      mode = _ref.mode,
      colorBground = _ref.colorBground,
      colorPrimary = _ref.colorPrimary,
      colorAccent = _ref.colorAccent,
      elementId = _ref.elementId,
      groupId = _ref.groupId,
      width = _ref.width,
      height = _ref.height,
      noCover = _ref.noCover,
      wide = _ref.wide,
      props = _objectWithoutProperties(_ref, ["background", "mode", "colorBground", "colorPrimary", "colorAccent", "elementId", "groupId", "width", "height", "noCover", "wide"]);

  var theme = (0, _styledComponents.useTheme)();
  var color1 = useColor(theme, colorBground, 'FFFFFF');
  var color2 = useColor(theme, colorPrimary, '000000');
  var color3 = useColor(theme, colorAccent, '5181B8');
  var dOpt = useDebounce({
    height: height,
    width: width,
    wide: wide,
    no_cover: noCover,
    color1: color1,
    color2: color2,
    color3: color3,
    mode: mode
  }, 1000, true);
  var dGroupId = useDebounce(parseInt(groupId, 10), 1000);
  var dElementId = useDebounce(elementId, 1000);

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      key = _useState4[0],
      setKey = _useState4[1];

  (0, _react.useEffect)(function () {
    setKey(dGroupId + JSON.stringify(dOpt) + dElementId);
  }, [dGroupId, dOpt, dElementId]);
  return /*#__PURE__*/_react["default"].createElement(_widgets.Box, _extends({
    width: "auto"
  }, props), dGroupId ? /*#__PURE__*/_react["default"].createElement(_reactVk["default"], {
    key: key
  }, /*#__PURE__*/_react["default"].createElement(_reactVk.Group, {
    elementId: dElementId,
    groupId: dGroupId,
    options: dOpt
  })) : /*#__PURE__*/_react["default"].createElement(_ComponentNotice["default"], {
    message: "Add your VK community ID in the Props panel"
  }));
};

var propInfo = {
  groupId: {
    title: {
      en: 'VK community ID',
      ru: 'Идентификатор сообщества'
    },
    control: 'input',
    type: 'text',
    category: ' Main',
    weight: 1
  },
  elementId: {
    title: {
      en: 'Widget container ID',
      ru: 'Идентификатор контейнера'
    },
    control: 'input',
    type: 'text',
    category: 'Widget',
    weight: 1
  },
  colorBground: {
    title: {
      en: 'Widget background color',
      ru: 'Цвет фона виджета'
    },
    control: 'color',
    category: 'Widget',
    weight: 1
  },
  colorPrimary: {
    title: {
      en: 'Widget text color',
      ru: 'Цвет текста виджета'
    },
    control: 'color',
    category: 'Widget',
    weight: 1
  },
  colorAccent: {
    title: {
      en: 'Widget link color',
      ru: 'Цвет ссылок виджета'
    },
    control: 'color',
    category: 'Button',
    weight: 1
  },
  mode: {
    title: {
      en: 'What to display in the widget',
      ru: 'Что отображать в виджете'
    },
    control: 'select',
    variants: [{
      title: {
        en: 'Display the community members',
        ru: 'Члены сообщества'
      },
      value: 3
    }, {
      title: {
        en: 'Display the community wall',
        ru: 'Новости'
      },
      value: 4
    }, {
      title: {
        en: 'Display only the community name',
        ru: 'Только название'
      },
      value: 1
    }],
    category: 'Widget',
    weight: 1
  },
  noCover: {
    title: {
      en: "Don't display the community cover photo",
      ru: 'Не отображать обложки сообщества'
    },
    control: 'checkbox',
    category: 'Widget',
    weight: 1
  },
  wide: {
    title: {
      en: 'Enable advanced mode',
      ru: 'Включить расширенный режим'
    },
    control: 'checkbox',
    category: 'Widget',
    weight: 1
  }
};
var defaultProps = {
  elementId: 'vk_groups',
  colorBground: '#FFFFFF',
  colorPrimary: '#000000',
  colorAccent: '#5181B8',
  mode: 3,
  noCover: false,
  wide: false
};
Object.assign(VkPageComponent, {
  propInfo: propInfo,
  defaultProps: defaultProps
});
var _default = VkPageComponent;
exports["default"] = _default;