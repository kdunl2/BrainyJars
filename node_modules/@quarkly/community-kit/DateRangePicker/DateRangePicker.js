"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _props = require("./props");

var _DatePicker = _interopRequireDefault(require("../DatePicker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DateRangePicker = function DateRangePicker(_ref) {
  var locale = _ref.locale,
      value = _ref.value,
      onChange = _ref.onChange,
      initialMonth = _ref.initialMonth,
      minDate = _ref.minDate,
      maxDate = _ref.maxDate,
      singleMonthOnly = _ref.singleMonthOnly,
      props = _objectWithoutProperties(_ref, ["locale", "value", "onChange", "initialMonth", "minDate", "maxDate", "singleMonthOnly"]);

  // Указываю mode, showOutsideDays и т.д. после ...props, чтобы это нельзя было изменить
  return /*#__PURE__*/_react["default"].createElement(_DatePicker["default"], _extends({
    value: value,
    onChange: onChange,
    locale: locale,
    minDate: minDate,
    maxDate: maxDate,
    initialMonth: initialMonth
  }, props, {
    mode: "range",
    showOutsideDays: false,
    numberOfMonths: singleMonthOnly ? 1 : 2
  }));
};

Object.assign(DateRangePicker, {
  title: 'DateRangePicker',
  desciption: {
    en: 'A DateRangePicker shows two sequential month calendars and lets the user select a single range of days.'
  },
  propInfo: _props.propInfo,
  defaultProps: _props.defaultProps
});
var _default = DateRangePicker;
exports["default"] = _default;